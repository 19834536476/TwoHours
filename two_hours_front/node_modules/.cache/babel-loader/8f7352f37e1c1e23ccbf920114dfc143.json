{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Ckeditor4 from \"@/components/Ckeditor4\";\nimport StartLogicFlow from \"@/components/myLogicFlow/StartLogicFlow\";\nexport default {\n  name: \"StuExamDoing\",\n  components: {\n    Ckeditor4: Ckeditor4,\n    StartLogicFlow: StartLogicFlow\n  },\n  data: function data() {\n    return {\n      user: {},\n      // 考生数据\n      exam: {},\n      // 考试信息\n      subjects: [],\n      // 试题集合\n      solutions: [],\n      // 答案集合\n      activeNames: [],\n      // 试题激活项\n      disabled: false,\n      // 按钮禁用\n      show: false,\n      intervalId: 0,\n      // 计时器id\n      day: 10,\n      hour: 10,\n      minute: 59,\n      second: 59\n    };\n  },\n  created: function created() {\n    this.getUser(); // 启动计时\n\n    this.intervalId = setInterval(this.getHaveTime, 1000);\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    // 关闭计时器\n    clearInterval(this.intervalId);\n    next();\n  },\n  methods: {\n    // 获取用户数据\n    getUser: function getUser() {\n      var _this = this;\n\n      this.$axios.get(\"/Users/isUserLogin\").then(function (res) {\n        if (res.data.flag) {\n          // 保存用户数据\n          _this.user = res.data.data; // 获取考生数据\n\n          _this.getExam();\n        } else {\n          // 服务故障-跳转登陆界面\n          _this.$router.push({\n            name: 'Login'\n          });\n        }\n      });\n    },\n    // 查询考试数据\n    getExam: function getExam() {\n      var _this2 = this;\n\n      var exam = {\n        examId: this.$route.params.examId\n      };\n      this.$axios.post(\"/Exam/getExamById\", exam).then(function (res) {\n        if (res.data.flag) {\n          /* 保存公告数据 */\n          _this2.exam = res.data.data;\n\n          _this2.getSubject();\n        } else {\n          // 服务故障\n          _this2.$message.error(\"信息获取失败！\");\n        }\n      });\n    },\n    // 查询试题数据\n    getSubject: function getSubject() {\n      var _this3 = this;\n\n      this.$axios.post(\"/Paper/getPaperByExamId\", this.exam).then(function (res) {\n        if (res.data.flag) {\n          /* 保存公告数据 */\n          _this3.subjects = res.data.data;\n\n          _this3.allShow(); // 全部展开\n\n\n          _this3.getSolutions(); // 获取答题数据\n\n        } else {\n          // 服务故障\n          _this3.$message.error(\"信息获取失败！\");\n        }\n      });\n    },\n    // 查询答题数据\n    getSolutions: function getSolutions() {\n      var _this4 = this;\n\n      var exam = {\n        examId: this.exam.examId\n      };\n      this.$axios.post(\"/Answer/getAnswer\", exam).then(function (res) {\n        if (res.data.flag) {\n          if (res.data.data.length > 0) {\n            // 已参与过该考试\n            _this4.solutions = res.data.data; // 单选题数据处理\n\n            for (var i in _this4.solutions) {\n              if (_this4.solutions[i].subjectType === 1 && _this4.solutions[i].answerNum === 1) {\n                _this4.solutions[i].answer = parseInt(_this4.solutions[i].answer);\n              }\n            } // 禁用提交按钮\n\n\n            _this4.disabled = true;\n            _this4.show = true;\n          } else {\n            // 未参与考试\n            _this4.initSolutions(); // 初始化答案数据模型\n\n          }\n        } else {\n          _this4.$message.error(res.data.msg);\n        }\n      });\n    },\n    // 初始化答案数据模型\n    initSolutions: function initSolutions() {\n      this.solutions = []; // 每一道题目对应一个答案数据模型\n\n      for (var i in this.subjects) {\n        var subject = this.subjects[i]; // 获取题目数据\n\n        var solution = {\n          // 封装答案数据\n          answerId: undefined,\n          examId: this.exam.examId,\n          subjectType: subject.subjectType,\n          subjectId: subject.subjectId,\n          subjectNum: subject.subjectNum,\n          userId: this.user.userId,\n          answerNum: 1,\n          answerOptions: [],\n          answer: '',\n          answerBool: false // 判断题封装\n\n        }; // 不同的题型初始化不同的项数据\n\n        if (subject.subjectType === 1 && !subject.isSingleChoice) {\n          // 多选题\n          solution.answerNum = subject.choiceOptions.length; // 封装项数\n\n          for (var j in subject.choiceOptions) {\n            // 选择题初始化选项对应答案时，通过answerBool传递数据，最后也应该通过answerBool转换为answer\n            this.$set(solution.answerOptions, j, {\n              answerId: undefined,\n              num: subject.choiceOptions[j].num,\n              answer: '0',\n              answerBool: false\n            });\n          }\n        } else if (subject.subjectType === 2) {\n          // 填空题\n          solution.answerNum = subject.fillingBlanks.length; // 封装项数\n\n          for (var _j in subject.fillingBlanks) {\n            this.$set(solution.answerOptions, _j, {\n              answerId: undefined,\n              num: subject.fillingBlanks[_j].num,\n              answer: ''\n            });\n          }\n        }\n\n        this.$set(this.solutions, i, solution);\n      }\n\n      this.show = true;\n    },\n    // 计算剩余时间\n    getHaveTime: function getHaveTime() {\n      var date = new Date();\n\n      if (date > this.exam.endDate) {\n        clearInterval(this.intervalId); // 关闭计时器\n\n        return '考试已结束'; // 显示考试已结束\n      }\n\n      var endDate = Date.parse(this.exam.endDate);\n      var haveTime = (endDate - date.getTime()) / 1000; // console.log(haveTime);\n      //这是剩余的所有秒数\n\n      this.day = parseInt(haveTime / (24 * 3600)); //剩余天数\n\n      this.hour = parseInt(haveTime % (24 * 3600) / 3600); //剩余小时\n\n      this.minute = parseInt(haveTime % 3600 / 60); //剩余分钟\n\n      this.second = parseInt(haveTime % 60); //剩余秒数\n    },\n    // 全部折叠\n    allHidden: function allHidden() {\n      this.activeNames = [];\n    },\n    // 全部展开\n    allShow: function allShow() {\n      this.allHidden();\n      /* 激活全部题组 */\n\n      for (var i = 0; i < this.subjects.length; i++) {\n        this.$set(this.activeNames, i, i);\n      }\n    },\n    // 提交答案 - 完成答案数据组织和持久化\n    submitSolution: function submitSolution(solutions) {\n      var _this5 = this;\n\n      // 数据封装\n      for (var i in solutions) {\n        switch (solutions[i].subjectType) {\n          case 1:\n            // 选择题\n            if (solutions[i].answerNum !== null) {\n              // 多选题\n              for (var j in solutions[i].answerOptions) {\n                if (solutions[i].answerOptions[j].answerBool) {\n                  solutions[i].answerOptions[j].answer = '1';\n                } else {\n                  solutions[i].answerOptions[j].answer = '0';\n                }\n              }\n            }\n\n            break;\n\n          case 2:\n            // 填空题不需要封装\n            break;\n\n          case 3:\n            // 判断题\n            if (solutions[i].answerBool) {\n              solutions[i].answer = '1';\n            } else {\n              solutions[i].answer = '0';\n            }\n\n            break;\n\n          case 4:\n            // 简答题不需要封装\n            break;\n        }\n      }\n\n      this.$axios.post(\"/Answer/submitAnswer\", solutions).then(function (res) {\n        if (res.data.flag) {\n          _this5.$message.success(\"提交成功！\"); // 考试结束处理  禁用提交按钮\n\n\n          _this5.disabled = true;\n        } else {\n          _this5.$message.error(res.data.msg);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;AACA;AACA;AACAA,sBADA;AAEAC;AACAC,wBADA;AAEAC;AAFA,GAFA;AAMAC,MANA,kBAMA;AACA;AACAC,cADA;AACA;AACAC,cAFA;AAEA;AACAC,kBAHA;AAGA;AACAC,mBAJA;AAIA;AACAC,qBALA;AAKA;AACAC,qBANA;AAMA;AACAC,iBAPA;AAQAC,mBARA;AAQA;AACAC,aATA;AAUAC,cAVA;AAWAC,gBAXA;AAYAC;AAZA;AAcA,GArBA;AAsBAC,SAtBA,qBAsBA;AACA,mBADA,CAEA;;AACA;AACA,GA1BA;AA2BAC,kBA3BA,4BA2BAC,EA3BA,EA2BAC,IA3BA,EA2BAC,IA3BA,EA2BA;AACA;AACAC;AACAD;AACA,GA/BA;AAgCAE;AACA;AACAC,WAFA,qBAEA;AAAA;;AACA;AACA;AACA;AACA,qCAFA,CAGA;;AACA;AACA,SALA,MAKA;AACA;AACA;AAAAxB;AAAA;AACA;AACA,OAVA;AAWA,KAdA;AAeA;AACAyB,WAhBA,qBAgBA;AAAA;;AACA;AAAAC;AAAA;AACA;AACA;AACA;AACA;;AACA;AACA,SAJA,MAIA;AACA;AACA;AACA;AACA,OATA;AAUA,KA5BA;AA6BA;AACAC,cA9BA,wBA8BA;AAAA;;AACA;AACA;AACA;AACA;;AACA,2BAHA,CAGA;;;AACA,gCAJA,CAIA;;AACA,SALA,MAKA;AACA;AACA;AACA;AACA,OAVA;AAWA,KA1CA;AA2CA;AACAC,gBA5CA,0BA4CA;AAAA;;AACA;AAAAF;AAAA;AACA;AACA;AACA;AACA;AACA,6CAFA,CAGA;;AACA;AACA;AACA;AACA;AACA,aARA,CASA;;;AACA;AACA;AACA,WAZA,MAYA;AACA;AACA,mCAFA,CAEA;;AACA;AACA,SAjBA,MAiBA;AACA;AACA;AACA,OArBA;AAsBA,KApEA;AAqEA;AACAG,iBAtEA,2BAsEA;AACA,0BADA,CAEA;;AACA;AACA,uCADA,CACA;;AACA;AAAA;AACAC,6BADA;AAEAJ,kCAFA;AAGAK,0CAHA;AAIAC,sCAJA;AAKAC,wCALA;AAMAC,kCANA;AAOAC,sBAPA;AAQAC,2BARA;AASAC,oBATA;AAUAC,2BAVA,CAUA;;AAVA,UAFA,CAcA;;AACA;AAAA;AACAC,4DADA,CACA;;AACA;AACA;AACA,iDACA;AAAAT;AAAAU;AAAAH;AAAAC;AAAA,aADA;AAEA;AACA,SAPA,MAOA;AAAA;AACAC,4DADA,CACA;;AACA;AACA,kDACA;AAAAT;AAAAU;AAAAH;AAAA,aADA;AAEA;AACA;;AACA;AACA;;AACA;AACA,KAzGA;AA0GA;AACAI,eA3GA,yBA2GA;AACA;;AACA;AACAnB,uCADA,CACA;;AACA,uBAFA,CAEA;AACA;;AACA;AACA,uDAPA,CAQA;AACA;;AACA,kDAVA,CAUA;;AACA,0DAXA,CAWA;;AACA,mDAZA,CAYA;;AACA,4CAbA,CAaA;AACA,KAzHA;AA0HA;AACAoB,aA3HA,uBA2HA;AACA;AACA,KA7HA;AA8HA;AACAC,WA/HA,qBA+HA;AACA;AACA;;AACA;AAAA;AAAA;AACA,KAnIA;AAoIA;AACAC,kBArIA,0BAqIApC,SArIA,EAqIA;AAAA;;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACAA;AACA,iBAFA,MAEA;AACAA;AACA;AACA;AACA;;AACA;;AACA;AAAA;AACA;;AACA;AAAA;AACA;AACAA;AACA,aAFA,MAEA;AACAA;AACA;;AACA;;AACA;AAAA;AACA;AAtBA;AAwBA;;AACA;AACA;AACA,2CADA,CAEA;;;AACA;AACA,SAJA,MAIA;AACA;AACA;AACA,OARA;AASA;AA1KA;AAhCA","names":["name","components","Ckeditor4","StartLogicFlow","data","user","exam","subjects","solutions","activeNames","disabled","show","intervalId","day","hour","minute","second","created","beforeRouteLeave","to","from","next","clearInterval","methods","getUser","getExam","examId","getSubject","getSolutions","initSolutions","answerId","subjectType","subjectId","subjectNum","userId","answerNum","answerOptions","answer","answerBool","solution","num","getHaveTime","allHidden","allShow","submitSolution"],"sourceRoot":"src/pages/user/studentComponents","sources":["StuExamDoing.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 考试详情 -->\r\n        <el-card :body-style=\"{ padding: '0px'}\" style=\"margin-top: 2em\">\r\n            <div id=\"examCards\">\r\n                <!-- 标题和时间 -->\r\n                <div style=\"margin-top: 1.2em;\">\r\n                    <span id=\"examTitle\">{{exam.title}}</span>\r\n                    <span id=\"examDate\">{{exam.formatCreateDate}}</span>\r\n                    <span id=\"haveTime\">距离考试结束：{{day}}天{{hour}}时{{minute}}分{{second}}秒</span>\r\n                </div>\r\n                <!-- 内容 -->\r\n                <div id=\"examDetails\" v-html=\"exam.detail\">{{exam.detail}}</div>\r\n            </div>\r\n        </el-card>\r\n        <!-- 分割区 -->\r\n        <div class=\"myDivider\"></div>\r\n        <!-- 题目区 -->\r\n        <el-card id=\"subjectCard\" v-if=\"show\">\r\n            <!-- 功能区 -->\r\n            <div id=\"controlSubject\">\r\n                <start-logic-flow class=\"startLogicFlow\"></start-logic-flow>\r\n                <el-button type=\"text\" class=\"conSubjectButton\" @click=\"allHidden\">全部折叠</el-button>\r\n                <el-button type=\"text\" class=\"conSubjectButton\" @click=\"allShow\">全部展开</el-button>\r\n            </div>\r\n            <!-- 题目区 -->\r\n            <el-collapse v-model=\"activeNames\">\r\n                <div id=\"emptySubject\" v-if=\"subjects.length === 0\">暂无题目</div>\r\n                <el-collapse-item v-for=\"(item,index) in subjects\" :key=\"index\" :name=\"index\">\r\n                    <!-- 标题 -->\r\n                    <template slot=\"title\">\r\n                        <span style=\"margin-left: 1em; position: relative;\">\r\n                            <!-- 题号 -->\r\n                            <span class=\"subjectNum\">{{index+1}}</span>\r\n                            <!-- 选择题 -->\r\n                            <span v-if=\"item.subjectType === 1\" class=\"tagBox\">\r\n                                <el-tag class=\"subjectTag\" v-if=\"item.isSingleChoice\">单选</el-tag>\r\n                                <el-tag class=\"subjectTag\" v-else>多选</el-tag>\r\n                                <el-tag class=\"subjectTag\" type=\"success\">{{item.choice.score}}分</el-tag>\r\n                            </span>\r\n                            <!-- 填空题 -->\r\n                            <span v-else-if=\"item.subjectType === 2\" class=\"tagBox\">\r\n                                <el-tag class=\"subjectTag\">填空</el-tag>\r\n                                <el-tag class=\"subjectTag\" type=\"success\">{{item.filling.score}}分</el-tag>\r\n                                <el-tag class=\"subjectTag\" type=\"success\" v-if=\"item.filling.isCapitalBool\">大写区分</el-tag>\r\n                                <el-tag class=\"subjectTag\" type=\"success\" v-if=\"item.filling.isOrderBool\">答案有序</el-tag>\r\n                            </span>\r\n                            <!-- 判断题 -->\r\n                            <span v-else-if=\"item.subjectType === 3\" class=\"tagBox\">\r\n                                <el-tag class=\"subjectTag\">判断</el-tag>\r\n                                <el-tag class=\"subjectTag\" type=\"success\">{{item.trueFalse.score}}分</el-tag>\r\n                            </span>\r\n                            <!-- 简答题 -->\r\n                            <span v-else-if=\"item.subjectType === 4\" class=\"tagBox\">\r\n                                <el-tag class=\"subjectTag\">简答</el-tag>\r\n                                <el-tag class=\"subjectTag\" type=\"success\">{{item.questionAnswer.score}}分</el-tag>\r\n                            </span>\r\n                        </span>\r\n                    </template>\r\n                    <!-- 内容 -->\r\n                    <div class=\"subjectContent\">\r\n                        <!-- 选择题 -->\r\n                        <div v-if=\"item.subjectType === 1\">\r\n                            <!-- 题目 -->\r\n                            <div class=\"divMargin\">\r\n                                <el-tag class=\"subjectTag\">题目</el-tag>\r\n                                <span v-html=\"item.choice.content\">{{item.choice.content}}</span>\r\n                            </div>\r\n                            <!-- 单选 -->\r\n                            <div v-if=\"item.isSingleChoice\" class=\"divMargin choiceOption\" v-for=\"(option,nums) in item.choiceOptions\" :key=\"nums\">\r\n                                <el-radio v-model=\"solutions[index].answer\" :label=\"option.num\">\r\n                                    <!-- 单选题向answer中存入了选择项的项序数，即num值-->\r\n                                    <span style=\"margin-left: 0.5em\">{{nums+1}}、{{option.content}}</span>\r\n                                </el-radio>\r\n\r\n                            </div>\r\n                            <!-- 多选 -->\r\n                            <div v-if=\"!item.isSingleChoice\" class=\"divMargin choiceOption\" v-for=\"(option,nums) in item.choiceOptions\" :key=\"nums\">\r\n                                <el-checkbox v-model=\"solutions[index].answerOptions[nums].answerBool\">\r\n                                    <!-- 多选题向solution中的列表项存入了对应项是否选择的bool值，提交前需进行数据包装-->\r\n                                    <span style=\"margin-left: 0.5em\">{{nums+1}}、{{option.content}}</span>\r\n                                </el-checkbox>\r\n                            </div>\r\n                        </div>\r\n                        <!-- 填空题 -->\r\n                        <div v-else-if=\"item.subjectType === 2\">\r\n                            <!-- 题目 -->\r\n                            <div class=\"divMargin\">\r\n                                <el-tag class=\"subjectTag\">题目</el-tag>\r\n                                <span v-html=\"item.filling.content\">{{item.filling.content}}</span>\r\n                            </div>\r\n                            <!-- 答案 -->\r\n                            <div class=\"divMargin\">\r\n                                <el-tag class=\"subjectTag\">回答：</el-tag>\r\n                                <div class=\"fillingBlank\" v-for=\"(option,nums) in solutions[index].answerOptions\" :key=\"nums\">\r\n                                    <el-row>\r\n                                        <el-col :span=\"1\" style=\"position: relative\">\r\n                                            <div class=\"fillingBlankNum\">答案{{nums+1}}</div>\r\n                                        </el-col>\r\n                                        <el-col :span=\"8\">\r\n                                            <el-input v-model=\"option.answer\"></el-input>\r\n                                        </el-col>\r\n                                    </el-row>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <!-- 判断题 -->\r\n                        <div v-else-if=\"item.subjectType === 3\">\r\n                            <!-- 题目 -->\r\n                            <div class=\"divMargin\">\r\n                                <el-tag class=\"subjectTag\">题目</el-tag>\r\n                                <span v-html=\"item.trueFalse.content\">{{item.trueFalse.content}}</span>\r\n                            </div>\r\n                            <!-- 答案 -->\r\n                            <div class=\"divMargin\">\r\n                                <el-tag class=\"subjectTag\">回答：</el-tag>\r\n                                <el-switch v-model=\"solutions[index].answerBool\" active-text=\"对\" inactive-text=\"错\"></el-switch>\r\n                            </div>\r\n                        </div>\r\n                        <!-- 简答题 -->\r\n                        <div v-else-if=\"item.subjectType === 4\">\r\n                            <!-- 题目 -->\r\n                            <div class=\"divMargin\">\r\n                                <el-tag class=\"subjectTag\">题目</el-tag>\r\n                                <span v-html=\"item.questionAnswer.content\">{{item.questionAnswer.content}}</span>\r\n                            </div>\r\n                            <!-- 输入答案 -->\r\n                            <div class=\"divMargin\">\r\n                                <el-tag class=\"subjectTag\">回答：</el-tag>\r\n                                <ckeditor4 style=\"margin-top: 0.5em\" v-model=\"solutions[index].answer\"></ckeditor4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </el-collapse-item>\r\n            </el-collapse>\r\n            <!-- 考试提交 -->\r\n            <div id=\"submitSolution\">\r\n                <el-button :disabled=\"disabled\" type=\"primary\" class=\"conSubjectButton\" @click=\"submitSolution(solutions)\">提交答案</el-button>\r\n            </div>\r\n        </el-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Ckeditor4 from \"@/components/Ckeditor4\";\r\n    import StartLogicFlow from \"@/components/myLogicFlow/StartLogicFlow\";\r\n    export default {\r\n        name: \"StuExamDoing\",\r\n        components:{\r\n            Ckeditor4,\r\n            StartLogicFlow\r\n        },\r\n        data(){\r\n            return{\r\n                user:{},                // 考生数据\r\n                exam:{},                // 考试信息\r\n                subjects:[],            // 试题集合\r\n                solutions:[],           // 答案集合\r\n                activeNames: [],        // 试题激活项\r\n                disabled:false,         // 按钮禁用\r\n                show:false,\r\n                intervalId:0,           // 计时器id\r\n                day:10,\r\n                hour:10,\r\n                minute:59,\r\n                second:59\r\n            }\r\n        },\r\n        created() {\r\n            this.getUser();\r\n            // 启动计时\r\n            this.intervalId = setInterval(this.getHaveTime, 1000);\r\n        },\r\n        beforeRouteLeave(to,from,next){\r\n            // 关闭计时器\r\n            clearInterval(this.intervalId);\r\n            next();\r\n        },\r\n        methods:{\r\n            // 获取用户数据\r\n            getUser(){\r\n                this.$axios.get(\"/Users/isUserLogin\").then((res)=>{\r\n                    if(res.data.flag){\r\n                        // 保存用户数据\r\n                        this.user = res.data.data;\r\n                        // 获取考生数据\r\n                        this.getExam();\r\n                    }else{\r\n                        // 服务故障-跳转登陆界面\r\n                        this.$router.push({name:'Login'});\r\n                    }\r\n                });\r\n            },\r\n            // 查询考试数据\r\n            getExam(){\r\n                let exam = {examId:this.$route.params.examId};\r\n                this.$axios.post(\"/Exam/getExamById\", exam).then((res)=>{\r\n                    if(res.data.flag){\r\n                        /* 保存公告数据 */\r\n                        this.exam = res.data.data;\r\n                        this.getSubject();\r\n                    }else{\r\n                        // 服务故障\r\n                        this.$message.error(\"信息获取失败！\");\r\n                    }\r\n                });\r\n            },\r\n            // 查询试题数据\r\n            getSubject(){\r\n                this.$axios.post(\"/Paper/getPaperByExamId\", this.exam).then((res)=>{\r\n                    if(res.data.flag){\r\n                        /* 保存公告数据 */\r\n                        this.subjects = res.data.data;\r\n                        this.allShow();         // 全部展开\r\n                        this.getSolutions();    // 获取答题数据\r\n                    }else{\r\n                        // 服务故障\r\n                        this.$message.error(\"信息获取失败！\");\r\n                    }\r\n                });\r\n            },\r\n            // 查询答题数据\r\n            getSolutions(){\r\n                let exam = {examId:this.exam.examId};\r\n                this.$axios.post(\"/Answer/getAnswer\",exam).then((res)=>{\r\n                    if(res.data.flag){\r\n                        if(res.data.data.length > 0){\r\n                            // 已参与过该考试\r\n                            this.solutions = res.data.data;\r\n                            // 单选题数据处理\r\n                            for(let i in this.solutions){\r\n                                if(this.solutions[i].subjectType === 1 && this.solutions[i].answerNum === 1){\r\n                                    this.solutions[i].answer = parseInt(this.solutions[i].answer);\r\n                                }\r\n                            }\r\n                            // 禁用提交按钮\r\n                            this.disabled = true;\r\n                            this.show = true;\r\n                        }else{\r\n                            // 未参与考试\r\n                            this.initSolutions();   // 初始化答案数据模型\r\n                        }\r\n                    }else{\r\n                        this.$message.error(res.data.msg);\r\n                    }\r\n                });\r\n            },\r\n            // 初始化答案数据模型\r\n            initSolutions(){\r\n                this.solutions = [];\r\n                // 每一道题目对应一个答案数据模型\r\n                for(let i in this.subjects){\r\n                    let subject = this.subjects[i]; // 获取题目数据\r\n                    let solution = {                // 封装答案数据\r\n                        answerId:undefined,\r\n                        examId:this.exam.examId,\r\n                        subjectType:subject.subjectType,\r\n                        subjectId:subject.subjectId,\r\n                        subjectNum:subject.subjectNum,\r\n                        userId:this.user.userId,\r\n                        answerNum:1,\r\n                        answerOptions:[],\r\n                        answer:'',\r\n                        answerBool:false, // 判断题封装\r\n                    }\r\n                    // 不同的题型初始化不同的项数据\r\n                    if(subject.subjectType === 1 && !subject.isSingleChoice){   // 多选题\r\n                        solution.answerNum = subject.choiceOptions.length;      // 封装项数\r\n                        for(let j in subject.choiceOptions){\r\n                            // 选择题初始化选项对应答案时，通过answerBool传递数据，最后也应该通过answerBool转换为answer\r\n                            this.$set(solution.answerOptions, j,\r\n                                {answerId:undefined, num:subject.choiceOptions[j].num, answer:'0',answerBool:false})\r\n                        }\r\n                    }else if(subject.subjectType === 2){    // 填空题\r\n                        solution.answerNum = subject.fillingBlanks.length;      // 封装项数\r\n                        for(let j in subject.fillingBlanks){\r\n                            this.$set(solution.answerOptions, j,\r\n                                {answerId:undefined, num:subject.fillingBlanks[j].num, answer:''})\r\n                        }\r\n                    }\r\n                    this.$set(this.solutions,i,solution);\r\n                }\r\n                this.show = true;\r\n            },\r\n            // 计算剩余时间\r\n            getHaveTime(){\r\n                let date = new Date();\r\n                if(date > this.exam.endDate){\r\n                    clearInterval(this.intervalId); // 关闭计时器\r\n                    return '考试已结束'               // 显示考试已结束\r\n                }\r\n                let endDate = Date.parse(this.exam.endDate);\r\n                let haveTime = (endDate - date.getTime())/1000;\r\n                // console.log(haveTime);\r\n                //这是剩余的所有秒数\r\n                this.day = parseInt(haveTime / (24 * 3600)); //剩余天数\r\n                this.hour = parseInt((haveTime) % (24 * 3600) / 3600); //剩余小时\r\n                this.minute = parseInt((haveTime) % 3600 / 60); //剩余分钟\r\n                this.second = parseInt((haveTime) % 60);  //剩余秒数\r\n            },\r\n            // 全部折叠\r\n            allHidden(){\r\n                this.activeNames = [];\r\n            },\r\n            // 全部展开\r\n            allShow(){\r\n                this.allHidden();\r\n                /* 激活全部题组 */\r\n                for(let i = 0;i<this.subjects.length;i++) this.$set(this.activeNames,i,i);\r\n            },\r\n            // 提交答案 - 完成答案数据组织和持久化\r\n            submitSolution(solutions){\r\n                // 数据封装\r\n                for(let i in solutions){\r\n                    switch(solutions[i].subjectType){\r\n                        case 1: // 选择题\r\n                            if(solutions[i].answerNum !== null){    // 多选题\r\n                                for(let j in solutions[i].answerOptions){\r\n                                    if(solutions[i].answerOptions[j].answerBool) {\r\n                                        solutions[i].answerOptions[j].answer = '1';\r\n                                    }else{\r\n                                        solutions[i].answerOptions[j].answer = '0';\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 2: // 填空题不需要封装\r\n                            break;\r\n                        case 3: // 判断题\r\n                            if(solutions[i].answerBool){\r\n                                solutions[i].answer='1';\r\n                            }else{\r\n                                solutions[i].answer='0';\r\n                            }\r\n                            break;\r\n                        case 4: // 简答题不需要封装\r\n                            break;\r\n                    }\r\n                }\r\n                this.$axios.post(\"/Answer/submitAnswer\",solutions).then((res)=>{\r\n                    if(res.data.flag){\r\n                        this.$message.success(\"提交成功！\");\r\n                        // 考试结束处理  禁用提交按钮\r\n                        this.disabled = true;\r\n                    }else{\r\n                        this.$message.error(res.data.msg);\r\n                    }\r\n                })\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    /* 信息卡片 */\r\n    #examCards{\r\n        width: 90%;\r\n        min-height: 10em;\r\n        margin: auto;\r\n    }\r\n    /* 考试标题 */\r\n    #examTitle{\r\n        margin-bottom: 1.2em;\r\n        font-size: 28px;\r\n        font-weight: 600;\r\n        font-family: \"微软雅黑\";\r\n    }\r\n    /* 发表时间 */\r\n    #examDate{\r\n        color: #8a8a8a;\r\n        margin-left: 1.2em;\r\n    }\r\n    /* 截止时间 */\r\n    #haveTime{\r\n        color: #8f8f8f;\r\n        margin-left: 5em;\r\n    }\r\n    /* 详情 */\r\n    #examDetails{\r\n        margin-top: 20px;\r\n        margin-bottom: 20px;\r\n    }\r\n    /* 分割线 */\r\n    ::v-deep.myDivider{\r\n        margin: 2em 0;\r\n    }\r\n    /**\r\n     * 功能栏\r\n     */\r\n    /* 题目卡片区 */\r\n    #subjectCard{\r\n        padding: 0;\r\n        position: relative;\r\n    }\r\n    /* 题型选择栏 */\r\n    #controlSubject{\r\n        text-align: right;\r\n        margin-bottom: 0.6em;\r\n    }\r\n    /* 展开折叠按钮 */\r\n    .conSubjectButton{\r\n        right: 6em;\r\n        position: relative;\r\n    }\r\n    .startLogicFlow{\r\n        right: 80em;\r\n        position: relative;\r\n    }\r\n    /**\r\n     * 题目区\r\n     */\r\n    /* 题目序号 */\r\n    .subjectNum{\r\n        left: 1em;\r\n        position: relative;\r\n    }\r\n    /* 标签整体 */\r\n    .tagBox{\r\n        left: 3em;\r\n        width: 100em;\r\n        position: absolute;\r\n    }\r\n    /*　题目标签　*/\r\n    .subjectTag{\r\n        margin: 0 0.4em;\r\n    }\r\n    /**\r\n     * 内容区\r\n     */\r\n    .divMargin{\r\n        margin: 0.5em 0\r\n    }\r\n    /* 暂无题目 */\r\n    #emptySubject{\r\n        margin-left: 39vw;\r\n        color:#8d8d8d;\r\n        height:3em;\r\n        line-height:2.5em;\r\n        font-size: 16px\r\n    }\r\n    /* 内容区 */\r\n    .subjectContent{\r\n        width: 90%;\r\n        font-size: 18px;\r\n        left: 3em;\r\n        position: relative;\r\n    }\r\n    /* 选择题选项 */\r\n    .choiceOption{\r\n        left: 1em;\r\n        position: relative;\r\n    }\r\n    /* 填空题答案 */\r\n    .fillingBlank{\r\n        margin: 0.5em 0.5em;\r\n    }\r\n    /* 填空题序号 */\r\n    .fillingBlankNum{\r\n        position: relative;\r\n        top: 0.3em;\r\n        font-size: 14px;\r\n        color: #646464\r\n    }\r\n    /* 提交栏 */\r\n    #submitSolution{\r\n        text-align: right;\r\n        margin-top: 1em;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module"}