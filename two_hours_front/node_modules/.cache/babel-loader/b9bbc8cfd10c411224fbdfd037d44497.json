{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nimport GroupNode from './GroupNode';\n\nvar Group =\n/** @class */\nfunction () {\n  function Group(_a) {\n    var _this = this;\n\n    var lf = _a.lf;\n    this.nodeGroupMap = new Map();\n\n    this.graphRendered = function (data) {\n      // 如果节点\n      if (data && data.nodes) {\n        data.nodes.forEach(function (node) {\n          if (node.children) {\n            node.children.forEach(function (nodeId) {\n              _this.nodeGroupMap.set(nodeId, node.id);\n            });\n          }\n        });\n      }\n    };\n\n    this.appendNodeToGrop = function (_a) {\n      var data = _a.data; // 如果这个节点之前已经在group中了，则将其从之前的group中移除\n\n      var preGroupId = _this.nodeGroupMap.get(data.id);\n\n      if (preGroupId) {\n        var preGroup = _this.lf.getNodeModelById(preGroupId);\n\n        preGroup.removeChild(data.id);\n\n        _this.nodeGroupMap.delete(data.id);\n\n        preGroup.setAllowAppendChild(false);\n      } // 然后再判断这个节点是否在某个group中，如果在，则将其添加到对应的group中\n\n\n      var bounds = _this.lf.getNodeModelById(data.id).getBounds();\n\n      var group = _this.getGroup(bounds);\n\n      if (!group) return;\n\n      if (data.id !== group.id) {\n        group.addChild(data.id);\n\n        _this.nodeGroupMap.set(data.id, group.id);\n\n        group.setAllowAppendChild(false);\n      } else if (data.children && data.children.length > 0) {\n        // 表示当前添加的节点是一个新增的group\n        data.children.forEach(function (nodeId) {\n          _this.nodeGroupMap.set(nodeId, data.id);\n        });\n      }\n    };\n\n    this.deleteGroupChild = function (_a) {\n      var data = _a.data;\n\n      var groupId = _this.nodeGroupMap.get(data.id);\n\n      if (groupId) {\n        var group = _this.lf.getNodeModelById(groupId);\n\n        group.removeChild(data.id);\n\n        _this.nodeGroupMap.delete(data.id);\n      }\n    };\n\n    this.setActiveGroup = function (_a) {\n      var data = _a.data;\n\n      var nodeModel = _this.lf.getNodeModelById(data.id);\n\n      if (nodeModel.isGroup) return;\n      var bounds = nodeModel.getBounds();\n\n      var newGroup = _this.getGroup(bounds);\n\n      if (newGroup || newGroup !== _this.activeGroup) {\n        if (_this.activeGroup) {\n          _this.activeGroup.setAllowAppendChild(false);\n        }\n\n        if (newGroup) {\n          _this.activeGroup = newGroup;\n\n          _this.activeGroup.setAllowAppendChild(true);\n        }\n      }\n    };\n\n    lf.register(GroupNode);\n    this.lf = lf;\n    lf.graphModel.addNodeMoveRules(function (model, deltaX, deltaY) {\n      if (model.isGroup) {\n        // 如果移动的是分组，那么分组的子节点也跟着移动。\n        lf.graphModel.moveNodes(__spread(model.children), deltaX, deltaY, true);\n        return true;\n      }\n\n      var groupModel = lf.getNodeModelById(_this.nodeGroupMap.get(model.id));\n\n      if (groupModel && groupModel.isRestrict) {\n        // 如果移动的节点存在分组中，且这个分组禁止子节点移出去。\n        var _a = model.getBounds(),\n            x1 = _a.x1,\n            y1 = _a.y1,\n            x2 = _a.x2,\n            y2 = _a.y2;\n\n        var r = groupModel.isAllowMoveTo({\n          x1: x1 + deltaX,\n          y1: y1 + deltaY,\n          x2: x2 + deltaX,\n          y2: y2 + deltaY\n        });\n        return r;\n      }\n\n      return true;\n    });\n    lf.graphModel.group = this;\n    lf.on('node:add', this.appendNodeToGrop);\n    lf.on('node:delete', this.deleteGroupChild);\n    lf.on('node:drop', this.appendNodeToGrop);\n    lf.on('node:dnd-drag', this.setActiveGroup);\n    lf.on('node:drag', this.setActiveGroup);\n    lf.on('graph:rendered', this.graphRendered);\n  }\n  /**\n   * 获取自定位置其所属分组\n   */\n\n\n  Group.prototype.getGroup = function (bounds) {\n    var nodes = this.lf.graphModel.nodes;\n\n    for (var i = 0; i < nodes.length; i++) {\n      var model = nodes[i];\n\n      if (model.isGroup && model.isInRange(bounds)) {\n        return model;\n      }\n    }\n  };\n  /**\n   * 获取某个节点所属的groupModel\n   */\n\n\n  Group.prototype.getNodeGroup = function (nodeId) {\n    var groupId = this.nodeGroupMap.get(nodeId);\n\n    if (groupId) {\n      return this.lf.getNodeModelById(groupId);\n    }\n  };\n\n  Group.pluginName = 'group';\n  return Group;\n}();\n\nexport { Group, GroupNode };","map":{"version":3,"sources":["F:/Desktop/繁星教育/TH资料/two_hours_front/node_modules/@logicflow/extension/es/materials/group/index.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spread","arguments","length","concat","GroupNode","Group","_a","_this","lf","nodeGroupMap","Map","graphRendered","data","nodes","forEach","node","children","nodeId","set","id","appendNodeToGrop","preGroupId","get","preGroup","getNodeModelById","removeChild","delete","setAllowAppendChild","bounds","getBounds","group","getGroup","addChild","deleteGroupChild","groupId","setActiveGroup","nodeModel","isGroup","newGroup","activeGroup","register","graphModel","addNodeMoveRules","model","deltaX","deltaY","moveNodes","groupModel","isRestrict","x1","y1","x2","y2","isAllowMoveTo","on","prototype","isInRange","getNodeGroup","pluginName"],"mappings":"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","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport GroupNode from './GroupNode';\nvar Group = /** @class */ (function () {\n    function Group(_a) {\n        var _this = this;\n        var lf = _a.lf;\n        this.nodeGroupMap = new Map();\n        this.graphRendered = function (data) {\n            // 如果节点\n            if (data && data.nodes) {\n                data.nodes.forEach(function (node) {\n                    if (node.children) {\n                        node.children.forEach(function (nodeId) {\n                            _this.nodeGroupMap.set(nodeId, node.id);\n                        });\n                    }\n                });\n            }\n        };\n        this.appendNodeToGrop = function (_a) {\n            var data = _a.data;\n            // 如果这个节点之前已经在group中了，则将其从之前的group中移除\n            var preGroupId = _this.nodeGroupMap.get(data.id);\n            if (preGroupId) {\n                var preGroup = _this.lf.getNodeModelById(preGroupId);\n                preGroup.removeChild(data.id);\n                _this.nodeGroupMap.delete(data.id);\n                preGroup.setAllowAppendChild(false);\n            }\n            // 然后再判断这个节点是否在某个group中，如果在，则将其添加到对应的group中\n            var bounds = _this.lf.getNodeModelById(data.id).getBounds();\n            var group = _this.getGroup(bounds);\n            if (!group)\n                return;\n            if (data.id !== group.id) {\n                group.addChild(data.id);\n                _this.nodeGroupMap.set(data.id, group.id);\n                group.setAllowAppendChild(false);\n            }\n            else if (data.children && data.children.length > 0) {\n                // 表示当前添加的节点是一个新增的group\n                data.children.forEach(function (nodeId) {\n                    _this.nodeGroupMap.set(nodeId, data.id);\n                });\n            }\n        };\n        this.deleteGroupChild = function (_a) {\n            var data = _a.data;\n            var groupId = _this.nodeGroupMap.get(data.id);\n            if (groupId) {\n                var group = _this.lf.getNodeModelById(groupId);\n                group.removeChild(data.id);\n                _this.nodeGroupMap.delete(data.id);\n            }\n        };\n        this.setActiveGroup = function (_a) {\n            var data = _a.data;\n            var nodeModel = _this.lf.getNodeModelById(data.id);\n            if (nodeModel.isGroup)\n                return;\n            var bounds = nodeModel.getBounds();\n            var newGroup = _this.getGroup(bounds);\n            if (newGroup || newGroup !== _this.activeGroup) {\n                if (_this.activeGroup) {\n                    _this.activeGroup.setAllowAppendChild(false);\n                }\n                if (newGroup) {\n                    _this.activeGroup = newGroup;\n                    _this.activeGroup.setAllowAppendChild(true);\n                }\n            }\n        };\n        lf.register(GroupNode);\n        this.lf = lf;\n        lf.graphModel.addNodeMoveRules(function (model, deltaX, deltaY) {\n            if (model.isGroup) { // 如果移动的是分组，那么分组的子节点也跟着移动。\n                lf.graphModel.moveNodes(__spread(model.children), deltaX, deltaY, true);\n                return true;\n            }\n            var groupModel = lf.getNodeModelById(_this.nodeGroupMap.get(model.id));\n            if (groupModel && groupModel.isRestrict) { // 如果移动的节点存在分组中，且这个分组禁止子节点移出去。\n                var _a = model.getBounds(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;\n                var r = groupModel.isAllowMoveTo({\n                    x1: x1 + deltaX,\n                    y1: y1 + deltaY,\n                    x2: x2 + deltaX,\n                    y2: y2 + deltaY,\n                });\n                return r;\n            }\n            return true;\n        });\n        lf.graphModel.group = this;\n        lf.on('node:add', this.appendNodeToGrop);\n        lf.on('node:delete', this.deleteGroupChild);\n        lf.on('node:drop', this.appendNodeToGrop);\n        lf.on('node:dnd-drag', this.setActiveGroup);\n        lf.on('node:drag', this.setActiveGroup);\n        lf.on('graph:rendered', this.graphRendered);\n    }\n    /**\n     * 获取自定位置其所属分组\n     */\n    Group.prototype.getGroup = function (bounds) {\n        var nodes = this.lf.graphModel.nodes;\n        for (var i = 0; i < nodes.length; i++) {\n            var model = nodes[i];\n            if (model.isGroup && model.isInRange(bounds)) {\n                return model;\n            }\n        }\n    };\n    /**\n     * 获取某个节点所属的groupModel\n     */\n    Group.prototype.getNodeGroup = function (nodeId) {\n        var groupId = this.nodeGroupMap.get(nodeId);\n        if (groupId) {\n            return this.lf.getNodeModelById(groupId);\n        }\n    };\n    Group.pluginName = 'group';\n    return Group;\n}());\nexport { Group, GroupNode, };\n"]},"metadata":{},"sourceType":"module"}