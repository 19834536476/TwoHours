{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { h, Component } from 'preact';\nimport { LogicFlowUtil } from '@logicflow/core';\nimport Rect from '../BasicShape/Rect';\nimport { getDiamondReizeEdgePoint, getEllipseReizeEdgePoint, getRectReizeEdgePoint, ModelType } from './Util';\nvar StepDrag = LogicFlowUtil.StepDrag;\n\nvar Control =\n/** @class */\nfunction (_super) {\n  __extends(Control, _super);\n\n  function Control(props) {\n    var _this = _super.call(this) || this; // 更新中心点位置，更新文案位置\n\n\n    _this.updatePosition = function (_a) {\n      var deltaX = _a.deltaX,\n          deltaY = _a.deltaY;\n      var _b = _this.nodeModel,\n          x = _b.x,\n          y = _b.y;\n      _this.nodeModel.x = x + deltaX / 2;\n      _this.nodeModel.y = y + deltaY / 2;\n\n      _this.nodeModel.moveText(deltaX / 2, deltaY / 2);\n    }; // 计算control拖动后，节点的宽高\n\n\n    _this.getResize = function (_a) {\n      var index = _a.index,\n          deltaX = _a.deltaX,\n          deltaY = _a.deltaY,\n          width = _a.width,\n          height = _a.height,\n          _b = _a.pct,\n          pct = _b === void 0 ? 1 : _b;\n      var resize = {\n        width: width,\n        height: height\n      };\n\n      switch (index) {\n        case 0:\n          resize.width = width - deltaX * pct;\n          resize.height = height - deltaY * pct;\n          break;\n\n        case 1:\n          resize.width = width + deltaX * pct;\n          resize.height = height - deltaY * pct;\n          break;\n\n        case 2:\n          resize.width = width + deltaX;\n          resize.height = height + deltaY * pct;\n          break;\n\n        case 3:\n          resize.width = width - deltaX * pct;\n          resize.height = height + deltaY * pct;\n          break;\n\n        default:\n          break;\n      }\n\n      return resize;\n    }; // 矩形更新\n\n\n    _this.updateRect = function (_a) {\n      var deltaX = _a.deltaX,\n          deltaY = _a.deltaY;\n      var _b = _this.nodeModel,\n          id = _b.id,\n          x = _b.x,\n          y = _b.y,\n          width = _b.width,\n          height = _b.height,\n          radius = _b.radius; // 更新中心点位置，更新文案位置\n\n      var index = _this.index;\n\n      var size = _this.getResize({\n        index: index,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        width: width,\n        height: height,\n        pct: 1\n      }); // 限制放大缩小的最大最小范围\n\n\n      var _c = _this.nodeModel,\n          minWidth = _c.minWidth,\n          minHeight = _c.minHeight,\n          maxWidth = _c.maxWidth,\n          maxHeight = _c.maxHeight;\n\n      if (size.width < minWidth || size.width > maxWidth || size.height < minHeight || size.height > maxHeight) {\n        // 为了避免放到和缩小位置和鼠标不一致的问题\n        _this.dragHandler.cancelDrag();\n\n        return;\n      }\n\n      _this.updatePosition({\n        deltaX: deltaX,\n        deltaY: deltaY\n      }); // 更新宽高\n\n\n      _this.nodeModel.width = size.width;\n      _this.nodeModel.height = size.height;\n\n      _this.nodeModel.setProperties({\n        nodeSize: {\n          width: size.width,\n          height: size.height\n        }\n      });\n\n      var edges = _this.getNodeEdges(id);\n\n      var beforeNode = {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        radius: radius\n      };\n      var afterNode = {\n        x: _this.nodeModel.x,\n        y: _this.nodeModel.y,\n        width: _this.nodeModel.width,\n        height: _this.nodeModel.height,\n        radius: radius\n      };\n      var params = {\n        point: '',\n        beforeNode: beforeNode,\n        afterNode: afterNode\n      }; // 更新边\n\n      var afterPoint;\n      edges.sourceEdges.forEach(function (item) {\n        params.point = item.startPoint;\n        afterPoint = getRectReizeEdgePoint(params);\n        item.updateStartPoint(afterPoint);\n      });\n      edges.targetEdges.forEach(function (item) {\n        params.point = item.endPoint;\n        afterPoint = getRectReizeEdgePoint(params);\n        item.updateEndPoint(afterPoint);\n      });\n\n      _this.eventEmit({\n        beforeNode: beforeNode,\n        afterNode: afterNode\n      });\n    }; // 椭圆更新\n\n\n    _this.updateEllipse = function (_a) {\n      var deltaX = _a.deltaX,\n          deltaY = _a.deltaY;\n      var _b = _this.nodeModel,\n          id = _b.id,\n          rx = _b.rx,\n          ry = _b.ry,\n          x = _b.x,\n          y = _b.y;\n      var index = _this.index;\n      var width = rx;\n      var height = ry;\n\n      var size = _this.getResize({\n        index: index,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        width: width,\n        height: height,\n        pct: 1 / 2\n      }); // 限制放大缩小的最大最小范围\n\n\n      var _c = _this.nodeModel,\n          minWidth = _c.minWidth,\n          minHeight = _c.minHeight,\n          maxWidth = _c.maxWidth,\n          maxHeight = _c.maxHeight;\n\n      if (size.width < minWidth / 2 || size.width > maxWidth / 2 || size.height < minHeight / 2 || size.height > maxHeight / 2) {\n        _this.dragHandler.cancelDrag();\n\n        return;\n      } // 更新中心点位置，更新文案位置\n\n\n      _this.updatePosition({\n        deltaX: deltaX,\n        deltaY: deltaY\n      }); // 更新rx ry,宽高为计算属性自动更新\n      // @ts-ignore\n\n\n      _this.nodeModel.rx = _this.nodeModel.rx + deltaX / 2; // @ts-ignore\n\n      _this.nodeModel.ry = _this.nodeModel.ry + deltaY / 2;\n\n      _this.nodeModel.setProperties({\n        nodeSize: {\n          rx: size.width,\n          ry: size.height\n        }\n      });\n\n      var edges = _this.getNodeEdges(id);\n\n      var beforeNode = {\n        x: x,\n        y: y\n      };\n      var afterNode = {\n        rx: size.width,\n        ry: size.height,\n        x: _this.nodeModel.x,\n        y: _this.nodeModel.y\n      };\n      var params = {\n        point: {},\n        beforeNode: beforeNode,\n        afterNode: afterNode\n      }; // 更新边\n\n      var afterPoint;\n      edges.sourceEdges.forEach(function (item) {\n        params.point = item.startPoint;\n        afterPoint = getEllipseReizeEdgePoint(params);\n        item.updateStartPoint(afterPoint);\n      });\n      edges.targetEdges.forEach(function (item) {\n        params.point = item.endPoint;\n        afterPoint = getEllipseReizeEdgePoint(params);\n        item.updateEndPoint(afterPoint);\n      });\n\n      _this.eventEmit({\n        beforeNode: __assign(__assign({}, beforeNode), {\n          rx: rx,\n          ry: ry\n        }),\n        afterNode: afterNode\n      });\n    }; // 菱形更新\n\n\n    _this.updateDiamond = function (_a) {\n      var deltaX = _a.deltaX,\n          deltaY = _a.deltaY;\n      var _b = _this.nodeModel,\n          id = _b.id,\n          rx = _b.rx,\n          ry = _b.ry,\n          x = _b.x,\n          y = _b.y;\n      var index = _this.index;\n      var width = rx;\n      var height = ry;\n\n      var size = _this.getResize({\n        index: index,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        width: width,\n        height: height,\n        pct: 1 / 2\n      }); // 限制放大缩小的最大最小范围\n\n\n      var _c = _this.nodeModel,\n          minWidth = _c.minWidth,\n          minHeight = _c.minHeight,\n          maxWidth = _c.maxWidth,\n          maxHeight = _c.maxHeight;\n\n      if (size.width < minWidth / 2 || size.width > maxWidth / 2 || size.height < minHeight / 2 || size.height > maxHeight / 2) {\n        _this.dragHandler.cancelDrag();\n\n        return;\n      } // 更新中心点位置，更新文案位置\n\n\n      _this.updatePosition({\n        deltaX: deltaX,\n        deltaY: deltaY\n      }); // 更新rx ry,宽高为计算属性自动更新\n      // @ts-ignore\n\n\n      _this.nodeModel.rx = _this.nodeModel.rx + deltaX / 2; // @ts-ignore\n\n      _this.nodeModel.ry = _this.nodeModel.ry + deltaY / 2;\n\n      _this.nodeModel.setProperties({\n        nodeSize: {\n          rx: size.width,\n          ry: size.height\n        }\n      });\n\n      var beforeNode = {\n        x: x,\n        y: y,\n        rx: rx,\n        ry: ry\n      };\n      var afterNode = {\n        rx: size.width,\n        ry: size.height,\n        x: _this.nodeModel.x,\n        y: _this.nodeModel.y\n      };\n      var params = {\n        point: {},\n        beforeNode: beforeNode,\n        afterNode: afterNode\n      }; // 更新边\n\n      var afterPoint;\n\n      var edges = _this.getNodeEdges(id);\n\n      edges.sourceEdges.forEach(function (item) {\n        params.point = item.startPoint;\n        afterPoint = getDiamondReizeEdgePoint(params);\n        item.updateStartPoint(afterPoint);\n      });\n      edges.targetEdges.forEach(function (item) {\n        params.point = item.endPoint;\n        afterPoint = getDiamondReizeEdgePoint(params);\n        item.updateEndPoint(afterPoint);\n      });\n\n      _this.eventEmit({\n        beforeNode: beforeNode,\n        afterNode: afterNode\n      });\n    };\n\n    _this.eventEmit = function (_a) {\n      var beforeNode = _a.beforeNode,\n          afterNode = _a.afterNode;\n      var _b = _this.nodeModel,\n          id = _b.id,\n          modelType = _b.modelType,\n          type = _b.type;\n\n      var oldNodeSize = __assign({\n        id: id,\n        modelType: modelType,\n        type: type\n      }, beforeNode);\n\n      var newNodeSize = __assign({\n        id: id,\n        modelType: modelType,\n        type: type\n      }, afterNode);\n\n      _this.graphModel.eventCenter.emit('node:resize', {\n        oldNodeSize: oldNodeSize,\n        newNodeSize: newNodeSize\n      });\n    };\n\n    _this.onDraging = function (_a) {\n      var deltaX = _a.deltaX,\n          deltaY = _a.deltaY;\n      var modelType = _this.nodeModel.modelType; // html和矩形的计算方式是一样的，共用一个方法\n\n      if (modelType === ModelType.RECT_NODE || modelType === ModelType.HTML_NODE) {\n        _this.updateRect({\n          deltaX: deltaX,\n          deltaY: deltaY\n        }); // this.nodeModel.resize(deltaX, deltaY);\n\n      } else if (modelType === ModelType.ELLIPSE_NODE) {\n        _this.updateEllipse({\n          deltaX: deltaX,\n          deltaY: deltaY\n        });\n      } else if (modelType === ModelType.DIAMOND_NODE) {\n        _this.updateDiamond({\n          deltaX: deltaX,\n          deltaY: deltaY\n        });\n      }\n    };\n\n    _this.index = props.index;\n    _this.nodeModel = props.model;\n    _this.graphModel = props.graphModel;\n    var gridSize = _this.graphModel.gridSize; // 为保证对齐线功能正常使用，step默认是网格grid的两倍，\n    // 没有网格设置，默认为2，保证坐标是整数\n\n    var step = 2;\n\n    if (gridSize > 1) {\n      step = 2 * gridSize;\n    }\n\n    if (_this.nodeModel.gridSize) {\n      step = 2 * _this.nodeModel.gridSize;\n    }\n\n    _this.state = {};\n    _this.dragHandler = new StepDrag({\n      onDraging: _this.onDraging,\n      step: step\n    });\n    return _this;\n  }\n\n  Control.prototype.getNodeEdges = function (nodeId) {\n    var graphModel = this.graphModel;\n    var edges = graphModel.edges;\n    var sourceEdges = [];\n    var targetEdges = [];\n\n    for (var i = 0; i < edges.length; i++) {\n      var edgeModel = edges[i];\n\n      if (edgeModel.sourceNodeId === nodeId) {\n        sourceEdges.push(edgeModel);\n      } else if (edges[i].targetNodeId === nodeId) {\n        targetEdges.push(edgeModel);\n      }\n    }\n\n    return {\n      sourceEdges: sourceEdges,\n      targetEdges: targetEdges\n    };\n  };\n\n  Control.prototype.render = function () {\n    var _a = this.props,\n        x = _a.x,\n        y = _a.y,\n        index = _a.index,\n        model = _a.model;\n    var style = model.getControlPointStyle();\n    return h(\"g\", {\n      className: \"lf-resize-control-\" + index\n    }, h(Rect, __assign({\n      className: \"lf-node-control\"\n    }, {\n      x: x,\n      y: y\n    }, style, {\n      onMouseDown: this.dragHandler.handleMouseDown\n    })));\n  };\n\n  return Control;\n}(Component);\n\nexport default Control;","map":{"version":3,"sources":["F:/Desktop/繁星教育/TH资料/two_hours_front/node_modules/@logicflow/extension/es/NodeResize/Control/Control.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","h","Component","LogicFlowUtil","Rect","getDiamondReizeEdgePoint","getEllipseReizeEdgePoint","getRectReizeEdgePoint","ModelType","StepDrag","Control","_super","props","_this","updatePosition","_a","deltaX","deltaY","_b","nodeModel","x","y","moveText","getResize","index","width","height","pct","resize","updateRect","id","radius","size","_c","minWidth","minHeight","maxWidth","maxHeight","dragHandler","cancelDrag","setProperties","nodeSize","edges","getNodeEdges","beforeNode","afterNode","params","point","afterPoint","sourceEdges","forEach","item","startPoint","updateStartPoint","targetEdges","endPoint","updateEndPoint","eventEmit","updateEllipse","rx","ry","updateDiamond","modelType","type","oldNodeSize","newNodeSize","graphModel","eventCenter","emit","onDraging","RECT_NODE","HTML_NODE","ELLIPSE_NODE","DIAMOND_NODE","model","gridSize","step","state","nodeId","edgeModel","sourceNodeId","push","targetNodeId","render","style","getControlPointStyle","className","onMouseDown","handleMouseDown"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { h, Component } from 'preact';\nimport { LogicFlowUtil } from '@logicflow/core';\nimport Rect from '../BasicShape/Rect';\nimport { getDiamondReizeEdgePoint, getEllipseReizeEdgePoint, getRectReizeEdgePoint, ModelType } from './Util';\nvar StepDrag = LogicFlowUtil.StepDrag;\nvar Control = /** @class */ (function (_super) {\n    __extends(Control, _super);\n    function Control(props) {\n        var _this = _super.call(this) || this;\n        // 更新中心点位置，更新文案位置\n        _this.updatePosition = function (_a) {\n            var deltaX = _a.deltaX, deltaY = _a.deltaY;\n            var _b = _this.nodeModel, x = _b.x, y = _b.y;\n            _this.nodeModel.x = x + deltaX / 2;\n            _this.nodeModel.y = y + deltaY / 2;\n            _this.nodeModel.moveText(deltaX / 2, deltaY / 2);\n        };\n        // 计算control拖动后，节点的宽高\n        _this.getResize = function (_a) {\n            var index = _a.index, deltaX = _a.deltaX, deltaY = _a.deltaY, width = _a.width, height = _a.height, _b = _a.pct, pct = _b === void 0 ? 1 : _b;\n            var resize = { width: width, height: height };\n            switch (index) {\n                case 0:\n                    resize.width = width - deltaX * pct;\n                    resize.height = height - deltaY * pct;\n                    break;\n                case 1:\n                    resize.width = width + deltaX * pct;\n                    resize.height = height - deltaY * pct;\n                    break;\n                case 2:\n                    resize.width = width + deltaX;\n                    resize.height = height + deltaY * pct;\n                    break;\n                case 3:\n                    resize.width = width - deltaX * pct;\n                    resize.height = height + deltaY * pct;\n                    break;\n                default:\n                    break;\n            }\n            return resize;\n        };\n        // 矩形更新\n        _this.updateRect = function (_a) {\n            var deltaX = _a.deltaX, deltaY = _a.deltaY;\n            var _b = _this.nodeModel, id = _b.id, x = _b.x, y = _b.y, width = _b.width, height = _b.height, radius = _b.radius;\n            // 更新中心点位置，更新文案位置\n            var index = _this.index;\n            var size = _this.getResize({\n                index: index,\n                deltaX: deltaX,\n                deltaY: deltaY,\n                width: width,\n                height: height,\n                pct: 1,\n            });\n            // 限制放大缩小的最大最小范围\n            var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;\n            if (size.width < minWidth\n                || size.width > maxWidth\n                || size.height < minHeight\n                || size.height > maxHeight) {\n                // 为了避免放到和缩小位置和鼠标不一致的问题\n                _this.dragHandler.cancelDrag();\n                return;\n            }\n            _this.updatePosition({ deltaX: deltaX, deltaY: deltaY });\n            // 更新宽高\n            _this.nodeModel.width = size.width;\n            _this.nodeModel.height = size.height;\n            _this.nodeModel.setProperties({\n                nodeSize: {\n                    width: size.width,\n                    height: size.height,\n                },\n            });\n            var edges = _this.getNodeEdges(id);\n            var beforeNode = {\n                x: x,\n                y: y,\n                width: width,\n                height: height,\n                radius: radius,\n            };\n            var afterNode = {\n                x: _this.nodeModel.x,\n                y: _this.nodeModel.y,\n                width: _this.nodeModel.width,\n                height: _this.nodeModel.height,\n                radius: radius,\n            };\n            var params = {\n                point: '',\n                beforeNode: beforeNode,\n                afterNode: afterNode,\n            };\n            // 更新边\n            var afterPoint;\n            edges.sourceEdges.forEach(function (item) {\n                params.point = item.startPoint;\n                afterPoint = getRectReizeEdgePoint(params);\n                item.updateStartPoint(afterPoint);\n            });\n            edges.targetEdges.forEach(function (item) {\n                params.point = item.endPoint;\n                afterPoint = getRectReizeEdgePoint(params);\n                item.updateEndPoint(afterPoint);\n            });\n            _this.eventEmit({ beforeNode: beforeNode, afterNode: afterNode });\n        };\n        // 椭圆更新\n        _this.updateEllipse = function (_a) {\n            var deltaX = _a.deltaX, deltaY = _a.deltaY;\n            var _b = _this.nodeModel, id = _b.id, rx = _b.rx, ry = _b.ry, x = _b.x, y = _b.y;\n            var index = _this.index;\n            var width = rx;\n            var height = ry;\n            var size = _this.getResize({\n                index: index,\n                deltaX: deltaX,\n                deltaY: deltaY,\n                width: width,\n                height: height,\n                pct: 1 / 2,\n            });\n            // 限制放大缩小的最大最小范围\n            var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;\n            if (size.width < (minWidth / 2)\n                || size.width > (maxWidth / 2)\n                || size.height < (minHeight / 2)\n                || size.height > (maxHeight / 2)) {\n                _this.dragHandler.cancelDrag();\n                return;\n            }\n            // 更新中心点位置，更新文案位置\n            _this.updatePosition({ deltaX: deltaX, deltaY: deltaY });\n            // 更新rx ry,宽高为计算属性自动更新\n            // @ts-ignore\n            _this.nodeModel.rx = _this.nodeModel.rx + deltaX / 2;\n            // @ts-ignore\n            _this.nodeModel.ry = _this.nodeModel.ry + deltaY / 2;\n            _this.nodeModel.setProperties({\n                nodeSize: {\n                    rx: size.width,\n                    ry: size.height,\n                },\n            });\n            var edges = _this.getNodeEdges(id);\n            var beforeNode = { x: x, y: y };\n            var afterNode = {\n                rx: size.width,\n                ry: size.height,\n                x: _this.nodeModel.x,\n                y: _this.nodeModel.y,\n            };\n            var params = {\n                point: {},\n                beforeNode: beforeNode,\n                afterNode: afterNode,\n            };\n            // 更新边\n            var afterPoint;\n            edges.sourceEdges.forEach(function (item) {\n                params.point = item.startPoint;\n                afterPoint = getEllipseReizeEdgePoint(params);\n                item.updateStartPoint(afterPoint);\n            });\n            edges.targetEdges.forEach(function (item) {\n                params.point = item.endPoint;\n                afterPoint = getEllipseReizeEdgePoint(params);\n                item.updateEndPoint(afterPoint);\n            });\n            _this.eventEmit({ beforeNode: __assign(__assign({}, beforeNode), { rx: rx, ry: ry }), afterNode: afterNode });\n        };\n        // 菱形更新\n        _this.updateDiamond = function (_a) {\n            var deltaX = _a.deltaX, deltaY = _a.deltaY;\n            var _b = _this.nodeModel, id = _b.id, rx = _b.rx, ry = _b.ry, x = _b.x, y = _b.y;\n            var index = _this.index;\n            var width = rx;\n            var height = ry;\n            var size = _this.getResize({\n                index: index,\n                deltaX: deltaX,\n                deltaY: deltaY,\n                width: width,\n                height: height,\n                pct: 1 / 2,\n            });\n            // 限制放大缩小的最大最小范围\n            var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;\n            if (size.width < (minWidth / 2)\n                || size.width > (maxWidth / 2)\n                || size.height < (minHeight / 2)\n                || size.height > (maxHeight / 2)) {\n                _this.dragHandler.cancelDrag();\n                return;\n            }\n            // 更新中心点位置，更新文案位置\n            _this.updatePosition({ deltaX: deltaX, deltaY: deltaY });\n            // 更新rx ry,宽高为计算属性自动更新\n            // @ts-ignore\n            _this.nodeModel.rx = _this.nodeModel.rx + deltaX / 2;\n            // @ts-ignore\n            _this.nodeModel.ry = _this.nodeModel.ry + deltaY / 2;\n            _this.nodeModel.setProperties({\n                nodeSize: {\n                    rx: size.width,\n                    ry: size.height,\n                },\n            });\n            var beforeNode = { x: x, y: y, rx: rx, ry: ry };\n            var afterNode = {\n                rx: size.width,\n                ry: size.height,\n                x: _this.nodeModel.x,\n                y: _this.nodeModel.y,\n            };\n            var params = {\n                point: {},\n                beforeNode: beforeNode,\n                afterNode: afterNode,\n            };\n            // 更新边\n            var afterPoint;\n            var edges = _this.getNodeEdges(id);\n            edges.sourceEdges.forEach(function (item) {\n                params.point = item.startPoint;\n                afterPoint = getDiamondReizeEdgePoint(params);\n                item.updateStartPoint(afterPoint);\n            });\n            edges.targetEdges.forEach(function (item) {\n                params.point = item.endPoint;\n                afterPoint = getDiamondReizeEdgePoint(params);\n                item.updateEndPoint(afterPoint);\n            });\n            _this.eventEmit({ beforeNode: beforeNode, afterNode: afterNode });\n        };\n        _this.eventEmit = function (_a) {\n            var beforeNode = _a.beforeNode, afterNode = _a.afterNode;\n            var _b = _this.nodeModel, id = _b.id, modelType = _b.modelType, type = _b.type;\n            var oldNodeSize = __assign({ id: id, modelType: modelType, type: type }, beforeNode);\n            var newNodeSize = __assign({ id: id, modelType: modelType, type: type }, afterNode);\n            _this.graphModel.eventCenter.emit('node:resize', { oldNodeSize: oldNodeSize, newNodeSize: newNodeSize });\n        };\n        _this.onDraging = function (_a) {\n            var deltaX = _a.deltaX, deltaY = _a.deltaY;\n            var modelType = _this.nodeModel.modelType;\n            // html和矩形的计算方式是一样的，共用一个方法\n            if (modelType === ModelType.RECT_NODE || modelType === ModelType.HTML_NODE) {\n                _this.updateRect({ deltaX: deltaX, deltaY: deltaY });\n                // this.nodeModel.resize(deltaX, deltaY);\n            }\n            else if (modelType === ModelType.ELLIPSE_NODE) {\n                _this.updateEllipse({ deltaX: deltaX, deltaY: deltaY });\n            }\n            else if (modelType === ModelType.DIAMOND_NODE) {\n                _this.updateDiamond({ deltaX: deltaX, deltaY: deltaY });\n            }\n        };\n        _this.index = props.index;\n        _this.nodeModel = props.model;\n        _this.graphModel = props.graphModel;\n        var gridSize = _this.graphModel.gridSize;\n        // 为保证对齐线功能正常使用，step默认是网格grid的两倍，\n        // 没有网格设置，默认为2，保证坐标是整数\n        var step = 2;\n        if (gridSize > 1) {\n            step = 2 * gridSize;\n        }\n        if (_this.nodeModel.gridSize) {\n            step = 2 * _this.nodeModel.gridSize;\n        }\n        _this.state = {};\n        _this.dragHandler = new StepDrag({\n            onDraging: _this.onDraging,\n            step: step,\n        });\n        return _this;\n    }\n    Control.prototype.getNodeEdges = function (nodeId) {\n        var graphModel = this.graphModel;\n        var edges = graphModel.edges;\n        var sourceEdges = [];\n        var targetEdges = [];\n        for (var i = 0; i < edges.length; i++) {\n            var edgeModel = edges[i];\n            if (edgeModel.sourceNodeId === nodeId) {\n                sourceEdges.push(edgeModel);\n            }\n            else if (edges[i].targetNodeId === nodeId) {\n                targetEdges.push(edgeModel);\n            }\n        }\n        return { sourceEdges: sourceEdges, targetEdges: targetEdges };\n    };\n    Control.prototype.render = function () {\n        var _a = this.props, x = _a.x, y = _a.y, index = _a.index, model = _a.model;\n        var style = model.getControlPointStyle();\n        return (h(\"g\", { className: \"lf-resize-control-\" + index },\n            h(Rect, __assign({ className: \"lf-node-control\" }, { x: x, y: y }, style, { onMouseDown: this.dragHandler.handleMouseDown }))));\n    };\n    return Control;\n}(Component));\nexport default Control;\n"]},"metadata":{},"sourceType":"module"}