{"ast":null,"code":"//\n//\n//\n//\n//\n//\n// 引入logicFlow依赖\nimport LogicFlow from \"@logicflow/core\";\nimport \"@logicflow/core/dist/style/index.css\"; // 引入LogicFlow插件\n\nimport { DndPanel, Control, SelectionSelect, InsertNodeInPolyline, Snapshot, Menu } from '@logicflow/extension';\nimport '@logicflow/extension/lib/style/index.css'; // 自定义节点\n\nimport myRect from \"@/components/myLogicFlow/myNode/myRect\";\nimport myEllipse from \"@/components/myLogicFlow/myNode/myEllipse\";\n/* 组件 */\n\nexport default {\n  name: \"MyLogicFlow\",\n  mounted: function mounted() {\n    var _this = this;\n\n    this.lf = new LogicFlow({\n      container: this.$refs.container,\n      grid: true,\n      keyboard: {\n        enabled: true\n      },\n      stopScrollGraph: true,\n      nodeTextDraggable: true,\n      plugins: [DndPanel, Control, SelectionSelect, Menu, Snapshot, InsertNodeInPolyline]\n    }); // 关闭全局css设置-避免出现漏洞\n\n    this.lf.extension.snapshot.useGlobalRules = false; // 注册自定义组件\n\n    this.lf.register(myRect);\n    this.lf.register(myEllipse); // 挂载事件\n\n    this.lf.on('connection:not-allowed', function (msg) {\n      _this.$message.error(msg);\n    }); // 主题设置\n\n    this.lf.setTheme({\n      line: {\n        stroke: '#000000',\n        strokeWidth: 2\n      },\n      polyline: {\n        stroke: '#000000',\n        strokeWidth: 2\n      }\n    }); // 控制面板\n\n    this.lf.extension.dndPanel.setPatternItems([{\n      label: '选区',\n      icon: 'http://localhost:8080/imgs/icon/select.png',\n      callback: function callback() {\n        _this.lf.extension.selectionSelect.openSelectionSelect();\n\n        _this.lf.once('selection:selected', function () {\n          _this.lf.extension.selectionSelect.closeSelectionSelect();\n        });\n      }\n    }, {\n      type: 'myRect',\n      label: 'CPU',\n      text: 'CPU',\n      icon: 'http://localhost:8080/imgs/icon/cpu.png',\n      properties: {\n        statu: 'CPU'\n      }\n    }, {\n      type: 'myRect',\n      label: 'ACC',\n      text: 'ACC',\n      icon: 'http://localhost:8080/imgs/icon/acc.png',\n      properties: {\n        statu: 'ACC'\n      }\n    }, {\n      type: 'myRect',\n      label: 'ALU',\n      text: 'ALU',\n      icon: 'http://localhost:8080/imgs/icon/alu.png',\n      properties: {\n        statu: 'ALU'\n      }\n    }, {\n      type: 'myRect',\n      label: 'CU',\n      text: 'CU',\n      icon: 'http://localhost:8080/imgs/icon/cu.png',\n      properties: {\n        statu: 'CU'\n      }\n    }, {\n      type: 'myRect',\n      label: '主存',\n      text: '主存',\n      icon: 'http://localhost:8080/imgs/icon/mainStore.png',\n      properties: {\n        statu: 'MainStore'\n      }\n    }, {\n      type: 'myRect',\n      label: '辅存',\n      text: '辅存',\n      icon: 'http://localhost:8080/imgs/icon/plusStore.png',\n      properties: {\n        statu: 'PlusStore'\n      }\n    }, {\n      type: 'myRect',\n      label: 'IR',\n      text: 'IR',\n      icon: 'http://localhost:8080/imgs/icon/ir.png',\n      properties: {\n        statu: 'IR'\n      }\n    }, {\n      type: 'myRect',\n      label: 'PC',\n      text: 'PC',\n      icon: 'http://localhost:8080/imgs/icon/pc.png',\n      properties: {\n        statu: 'PC'\n      }\n    }, {\n      type: 'myRect',\n      label: '输入设备',\n      text: '输入设备',\n      icon: 'http://localhost:8080/imgs/icon/input.png',\n      properties: {\n        statu: 'Input'\n      }\n    }, {\n      type: 'myRect',\n      label: '输出设备',\n      text: '输出设备',\n      icon: 'http://localhost:8080/imgs/icon/output.png',\n      properties: {\n        statu: 'Output'\n      }\n    }, {\n      type: 'myRect',\n      label: '矩形',\n      icon: 'http://localhost:8080/imgs/icon/rect.png'\n    }, {\n      type: 'myEllipse',\n      label: '椭圆',\n      icon: 'http://localhost:8080/imgs/icon/circle.png'\n    }, {\n      label: '下载',\n      icon: 'http://localhost:8080/imgs/icon/download.png',\n      callback: function callback() {\n        _this.lf.getSnapshot();\n      }\n    }]); // 渲染\n\n    this.lf.render();\n  }\n};","map":{"version":3,"mappings":";;;;;;AAOA;AACA;AACA,8C,CACA;;AACA;AACA,kD,CACA;;AACA;AACA;AACA;;AACA;AACAA,qBADA;AAEAC,SAFA,qBAEA;AAAA;;AACA;AACAC,qCADA;AAEAC,gBAFA;AAGAC;AAAAC;AAAA,OAHA;AAIAC,2BAJA;AAKAC,6BALA;AAMAC;AANA,OADA,CASA;;AACA,sDAVA,CAWA;;AACA;AACA,gCAbA,CAcA;;AACA;AACA;AACA,KAFA,EAfA,CAkBA;;AACA;AACAC;AACAC,yBADA;AAEAC;AAFA,OADA;AAIAC;AACAF,yBADA;AAEAC;AAFA;AAJA,OAnBA,CA4BA;;AACA,gDACA;AACAE,iBADA;AAEAC,wDAFA;AAGAC;AACA;;AACA;AACA;AACA,SAFA;AAGA;AARA,KADA,EAUA;AACAC,oBADA;AAEAH,kBAFA;AAGAI,iBAHA;AAIAH,qDAJA;AAKAI;AAAAC;AAAA;AALA,KAVA,EAgBA;AACAH,oBADA;AAEAH,kBAFA;AAGAI,iBAHA;AAIAH,qDAJA;AAKAI;AAAAC;AAAA;AALA,KAhBA,EAsBA;AACAH,oBADA;AAEAH,kBAFA;AAGAI,iBAHA;AAIAH,qDAJA;AAKAI;AAAAC;AAAA;AALA,KAtBA,EA4BA;AACAH,oBADA;AAEAH,iBAFA;AAGAI,gBAHA;AAIAH,oDAJA;AAKAI;AAAAC;AAAA;AALA,KA5BA,EAkCA;AACAH,oBADA;AAEAH,iBAFA;AAGAI,gBAHA;AAIAH,2DAJA;AAKAI;AAAAC;AAAA;AALA,KAlCA,EAwCA;AACAH,oBADA;AAEAH,iBAFA;AAGAI,gBAHA;AAIAH,2DAJA;AAKAI;AAAAC;AAAA;AALA,KAxCA,EA8CA;AACAH,oBADA;AAEAH,iBAFA;AAGAI,gBAHA;AAIAH,oDAJA;AAKAI;AAAAC;AAAA;AALA,KA9CA,EAoDA;AACAH,oBADA;AAEAH,iBAFA;AAGAI,gBAHA;AAIAH,oDAJA;AAKAI;AAAAC;AAAA;AALA,KApDA,EA0DA;AACAH,oBADA;AAEAH,mBAFA;AAGAI,kBAHA;AAIAH,uDAJA;AAKAI;AAAAC;AAAA;AALA,KA1DA,EAgEA;AACAH,oBADA;AAEAH,mBAFA;AAGAI,kBAHA;AAIAH,wDAJA;AAKAI;AAAAC;AAAA;AALA,KAhEA,EAsEA;AACAH,oBADA;AAEAH,iBAFA;AAGAC;AAHA,KAtEA,EA0EA;AACAE,uBADA;AAEAH,iBAFA;AAGAC;AAHA,KA1EA,EA8EA;AACAD,iBADA;AAEAC,0DAFA;AAGAC;AACA;AACA;AALA,KA9EA,GA7BA,CAkHA;;AACA;AACA;AAtHA","names":["name","mounted","container","grid","keyboard","enabled","stopScrollGraph","nodeTextDraggable","plugins","line","stroke","strokeWidth","polyline","label","icon","callback","type","text","properties","statu"],"sourceRoot":"src/components/myLogicFlow","sources":["MyLogicFlow.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"container\" ref=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    // 引入logicFlow依赖\r\n    import LogicFlow from \"@logicflow/core\";\r\n    import \"@logicflow/core/dist/style/index.css\";\r\n    // 引入LogicFlow插件\r\n    import { DndPanel, Control, SelectionSelect, InsertNodeInPolyline, Snapshot , Menu} from '@logicflow/extension';\r\n    import '@logicflow/extension/lib/style/index.css'\r\n    // 自定义节点\r\n    import myRect from \"@/components/myLogicFlow/myNode/myRect\";\r\n    import myEllipse from \"@/components/myLogicFlow/myNode/myEllipse\";\r\n    /* 组件 */\r\n    export default {\r\n        name: \"MyLogicFlow\",\r\n        mounted() {\r\n            this.lf = new LogicFlow({\r\n                container: this.$refs.container,\r\n                grid: true,\r\n                keyboard: {enabled: true},\r\n                stopScrollGraph:true,\r\n                nodeTextDraggable:true,\r\n                plugins: [DndPanel, Control, SelectionSelect, Menu, Snapshot, InsertNodeInPolyline]\r\n            });\r\n            // 关闭全局css设置-避免出现漏洞\r\n            this.lf.extension.snapshot.useGlobalRules = false;\r\n            // 注册自定义组件\r\n            this.lf.register(myRect);\r\n            this.lf.register(myEllipse);\r\n            // 挂载事件\r\n            this.lf.on('connection:not-allowed', (msg) => {\r\n                this.$message.error(msg)\r\n            });\r\n            // 主题设置\r\n            this.lf.setTheme({\r\n                line: {\r\n                    stroke: '#000000',\r\n                    strokeWidth: 2,\r\n                },polyline: {\r\n                    stroke: '#000000',\r\n                    strokeWidth: 2,\r\n                }\r\n            })\r\n            // 控制面板\r\n            this.lf.extension.dndPanel.setPatternItems([\r\n                {\r\n                    label: '选区',\r\n                    icon:'http://localhost:8080/imgs/icon/select.png',\r\n                    callback: () => {\r\n                        this.lf.extension.selectionSelect.openSelectionSelect();\r\n                        this.lf.once('selection:selected', () => {\r\n                            this.lf.extension.selectionSelect.closeSelectionSelect();\r\n                        });\r\n                    }\r\n                },{\r\n                    type: 'myRect',\r\n                    label: 'CPU',\r\n                    text: 'CPU',\r\n                    icon:'http://localhost:8080/imgs/icon/cpu.png',\r\n                    properties: {statu:'CPU'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: 'ACC',\r\n                    text: 'ACC',\r\n                    icon:'http://localhost:8080/imgs/icon/acc.png',\r\n                    properties: {statu:'ACC'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: 'ALU',\r\n                    text: 'ALU',\r\n                    icon:'http://localhost:8080/imgs/icon/alu.png',\r\n                    properties: {statu:'ALU'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: 'CU',\r\n                    text: 'CU',\r\n                    icon:'http://localhost:8080/imgs/icon/cu.png',\r\n                    properties: {statu:'CU'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: '主存',\r\n                    text: '主存',\r\n                    icon:'http://localhost:8080/imgs/icon/mainStore.png',\r\n                    properties: {statu:'MainStore'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: '辅存',\r\n                    text: '辅存',\r\n                    icon:'http://localhost:8080/imgs/icon/plusStore.png',\r\n                    properties: {statu:'PlusStore'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: 'IR',\r\n                    text: 'IR',\r\n                    icon:'http://localhost:8080/imgs/icon/ir.png',\r\n                    properties: {statu:'IR'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: 'PC',\r\n                    text: 'PC',\r\n                    icon:'http://localhost:8080/imgs/icon/pc.png',\r\n                    properties: {statu:'PC'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: '输入设备',\r\n                    text: '输入设备',\r\n                    icon:'http://localhost:8080/imgs/icon/input.png',\r\n                    properties: {statu:'Input'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: '输出设备',\r\n                    text: '输出设备',\r\n                    icon:'http://localhost:8080/imgs/icon/output.png',\r\n                    properties: {statu:'Output'}\r\n                },{\r\n                    type: 'myRect',\r\n                    label: '矩形',\r\n                    icon:'http://localhost:8080/imgs/icon/rect.png',\r\n                },{\r\n                    type: 'myEllipse',\r\n                    label: '椭圆',\r\n                    icon: 'http://localhost:8080/imgs/icon/circle.png',\r\n                }, {\r\n                    label: '下载',\r\n                    icon:'http://localhost:8080/imgs/icon/download.png',\r\n                    callback: () => {\r\n                        this.lf.getSnapshot()\r\n                    }\r\n                }]);\r\n            // 渲染\r\n            this.lf.render();\r\n        },\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .container {\r\n        width: 98vw;\r\n        height: 98vh;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module"}