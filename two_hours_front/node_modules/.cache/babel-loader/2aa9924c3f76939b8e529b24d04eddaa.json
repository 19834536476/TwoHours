{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nimport { isNodeInSegement } from './edge';\n\nvar InsertNodeInPolyline =\n/** @class */\nfunction () {\n  function InsertNodeInPolyline(_a) {\n    var lf = _a.lf;\n    this._lf = lf;\n    this.dndAdd = true;\n    this.dropAdd = true;\n    this.eventHandler();\n  }\n\n  InsertNodeInPolyline.prototype.eventHandler = function () {\n    var _this = this; // 监听事件\n\n\n    if (this.dndAdd) {\n      this._lf.on('node:dnd-add', function (_a) {\n        var data = _a.data;\n\n        _this.insetNode(data);\n      });\n    }\n\n    if (this.dropAdd) {\n      this._lf.on('node:drop', function (_a) {\n        var data = _a.data;\n        var edges = _this._lf.graphModel.edges;\n        var id = data.id;\n        var pureNode = true;\n\n        for (var i = 0; i < edges.length; i++) {\n          if (edges[i].sourceNodeId === id || edges[i].targetNodeId === id) {\n            pureNode = false;\n            break;\n          }\n        }\n\n        if (pureNode) {\n          _this.insetNode(data);\n        }\n      });\n    }\n  };\n\n  InsertNodeInPolyline.prototype.insetNode = function (nodeData) {\n    var edges = this._lf.graphModel.edges;\n\n    var nodeModel = this._lf.getNodeModelById(nodeData.id);\n\n    for (var i = 0; i < edges.length; i++) {\n      // eslint-disable-next-line max-len\n      var _a = isNodeInSegement(nodeModel, edges[i]),\n          crossIndex = _a.crossIndex,\n          crossPoints = _a.crossPoints;\n\n      if (crossIndex >= 0) {\n        var _b = edges[i],\n            sourceNodeId = _b.sourceNodeId,\n            targetNodeId = _b.targetNodeId,\n            id = _b.id,\n            type = _b.type,\n            pointsList = _b.pointsList;\n\n        this._lf.addEdge({\n          type: type,\n          sourceNodeId: sourceNodeId,\n          targetNodeId: nodeData.id,\n          pointsList: __spread(pointsList.slice(0, crossIndex), [crossPoints.startCrossPoint])\n        });\n\n        this._lf.addEdge({\n          type: type,\n          sourceNodeId: nodeData.id,\n          targetNodeId: targetNodeId,\n          pointsList: __spread([crossPoints.endCrossPoint], pointsList.slice(crossIndex))\n        });\n\n        this._lf.deleteEdge(id);\n\n        break;\n      }\n    }\n  };\n\n  InsertNodeInPolyline.pluginName = 'insertNodeInPolyline';\n  return InsertNodeInPolyline;\n}();\n\nexport { InsertNodeInPolyline };\nexport default InsertNodeInPolyline;","map":{"version":3,"sources":["F:/Desktop/two_hours_front/node_modules/@logicflow/extension/es/insert-node-in-polyline/index.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spread","arguments","length","concat","isNodeInSegement","InsertNodeInPolyline","_a","lf","_lf","dndAdd","dropAdd","eventHandler","prototype","_this","on","data","insetNode","edges","graphModel","id","pureNode","sourceNodeId","targetNodeId","nodeData","nodeModel","getNodeModelById","crossIndex","crossPoints","_b","type","pointsList","addEdge","slice","startCrossPoint","endCrossPoint","deleteEdge","pluginName"],"mappings":"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","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { isNodeInSegement } from './edge';\nvar InsertNodeInPolyline = /** @class */ (function () {\n    function InsertNodeInPolyline(_a) {\n        var lf = _a.lf;\n        this._lf = lf;\n        this.dndAdd = true;\n        this.dropAdd = true;\n        this.eventHandler();\n    }\n    InsertNodeInPolyline.prototype.eventHandler = function () {\n        var _this = this;\n        // 监听事件\n        if (this.dndAdd) {\n            this._lf.on('node:dnd-add', function (_a) {\n                var data = _a.data;\n                _this.insetNode(data);\n            });\n        }\n        if (this.dropAdd) {\n            this._lf.on('node:drop', function (_a) {\n                var data = _a.data;\n                var edges = _this._lf.graphModel.edges;\n                var id = data.id;\n                var pureNode = true;\n                for (var i = 0; i < edges.length; i++) {\n                    if (edges[i].sourceNodeId === id || edges[i].targetNodeId === id) {\n                        pureNode = false;\n                        break;\n                    }\n                }\n                if (pureNode) {\n                    _this.insetNode(data);\n                }\n            });\n        }\n    };\n    InsertNodeInPolyline.prototype.insetNode = function (nodeData) {\n        var edges = this._lf.graphModel.edges;\n        var nodeModel = this._lf.getNodeModelById(nodeData.id);\n        for (var i = 0; i < edges.length; i++) {\n            // eslint-disable-next-line max-len\n            var _a = isNodeInSegement(nodeModel, edges[i]), crossIndex = _a.crossIndex, crossPoints = _a.crossPoints;\n            if (crossIndex >= 0) {\n                var _b = edges[i], sourceNodeId = _b.sourceNodeId, targetNodeId = _b.targetNodeId, id = _b.id, type = _b.type, pointsList = _b.pointsList;\n                this._lf.addEdge({\n                    type: type,\n                    sourceNodeId: sourceNodeId,\n                    targetNodeId: nodeData.id,\n                    pointsList: __spread(pointsList.slice(0, crossIndex), [crossPoints.startCrossPoint]),\n                });\n                this._lf.addEdge({\n                    type: type,\n                    sourceNodeId: nodeData.id,\n                    targetNodeId: targetNodeId,\n                    pointsList: __spread([crossPoints.endCrossPoint], pointsList.slice(crossIndex)),\n                });\n                this._lf.deleteEdge(id);\n                break;\n            }\n        }\n    };\n    InsertNodeInPolyline.pluginName = 'insertNodeInPolyline';\n    return InsertNodeInPolyline;\n}());\nexport { InsertNodeInPolyline };\nexport default InsertNodeInPolyline;\n"]},"metadata":{},"sourceType":"module"}