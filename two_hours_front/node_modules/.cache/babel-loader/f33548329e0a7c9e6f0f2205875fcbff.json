{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SearchBox from \"@/components/SearchBox\";\nimport Ckeditor4 from \"@/components/Ckeditor4\";\nexport default {\n  name: \"ExamTab\",\n  components: {\n    SearchBox: SearchBox,\n    Ckeditor4: Ckeditor4\n  },\n  data: function data() {\n    return {\n      user: '',\n      // 当前页码\n      currentPage: 1,\n      // 分页大小\n      pageSize: 10,\n      // 总页码数\n      totalCount: 1,\n      // 内置查询模型\n      searchTitle: {\n        title: ''\n      },\n      // 创建考试数据模型\n      editExamData: {\n        examId: undefined,\n        type: 3,\n        title: '',\n        detail: '',\n        notOrderBool: false,\n        notOrder: 0,\n        beginDate: null,\n        endDate: null,\n        dateRange: []\n      },\n      // 表单校验规则\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入考试名称',\n          trigger: 'blur'\n        }]\n      },\n      // 考试数据\n      examData: [],\n      // 考试创建区展示\n      showEditExam: false,\n      // 考试编辑状态\n      isEditStatue: false\n    };\n  },\n  created: function created() {\n    this.getUser();\n    this.getExam();\n  },\n  methods: {\n    // 获取用户数据\n    getUser: function getUser() {\n      var _this = this;\n\n      this.$axios.get(\"/Users/isUserLogin\").then(function (res) {\n        if (res.data.flag) {\n          // 保存用户数据\n          _this.user = res.data.data;\n        } else {\n          // 服务故障-跳转登陆界面\n          _this.$router.push({\n            name: 'Login'\n          });\n        }\n      });\n    },\n    // 查询考试数据\n    getExam: function getExam() {\n      var _this2 = this;\n\n      this.searchTitle[\"pageSize\"] = this.pageSize;\n      this.searchTitle[\"currentPage\"] = this.currentPage;\n      this.$axios.post(\"/Exam/getExam\", this.searchTitle).then(function (res) {\n        if (res.data.flag) {\n          /* 保存公告数据 */\n          _this2.examData = res.data.data.records;\n          /* 保存分页数据 */\n\n          _this2.totalCount = res.data.data.total;\n          _this2.currentPage = res.data.data.current;\n          _this2.pageSize = res.data.data.size;\n        } else {\n          // 服务故障\n          _this2.$message.error(\"信息获取失败！\");\n        }\n      });\n    },\n    // 创建考试\n    createExam: function createExam() {\n      // 数据清理\n      if (this.isEditStatue) {\n        // 残存的编辑状态\n        // 在用户未提交编辑内容时，会停留在编辑状态，故要状态重置\n        this.resetFormData();\n        this.isEditStatue = false;\n      }\n\n      this.showEditExam = true;\n    },\n    // 发布考试\n    submitExam: function submitExam(exam) {\n      var _this3 = this;\n\n      // 规则校验\n      this.$refs['createExamForm'].validate(function (valid) {\n        if (valid && _this3.editExamData.dateRange !== null) {\n          if (exam.dateRange.length === 0) {\n            _this3.$message.error(\"必须指定起止日期\");\n\n            return;\n          } // 校验完成 - 组织数据\n\n\n          exam.notOrder = exam.notOrderBool ? 1 : 0;\n          exam.type = 3; // 考试类型\n          // 时间分配\n\n          exam.beginDate = exam.dateRange[0];\n          exam.endDate = exam.dateRange[1];\n\n          if (_this3.isEditStatue) {\n            // 编辑表单状态，通过examId更新数据\n            _this3.$axios.post(\"/Exam/updateExam\", exam).then(function (res) {\n              if (res.data.flag) {\n                _this3.$message.success(res.data.msg); // 关闭窗口\n\n\n                _this3.showEditExam = false; // 关闭编辑状态\n\n                _this3.isEditStatue = false; // 重置表单\n\n                _this3.resetFormData(); // 刷新数据\n\n\n                _this3.getExam();\n              } else {\n                _this3.$message.error(res.data.msg);\n              }\n            });\n          } else {\n            // 清空无用的id\n            exam.examId = undefined; // 创建表单状态，创建一条新数据\n\n            _this3.$axios.post(\"/Exam/createExam\", exam).then(function (res) {\n              if (res.data.flag) {\n                _this3.$message.success(res.data.msg); // 关闭窗口\n\n\n                _this3.showEditExam = false; // 重置表单\n\n                _this3.resetFormData(); // 刷新数据\n\n\n                _this3.getExam();\n              } else {\n                _this3.$message.error(res.data.msg);\n              }\n            });\n          }\n        } else {\n          // 校验失败\n          _this3.$message.warning(\"请将考试名称填写完整\");\n        }\n      });\n    },\n    // 重置表单\n    resetFormData: function resetFormData() {\n      this.editExamData.examId = undefined;\n      this.editExamData.title = '';\n      this.editExamData.detail = '';\n      this.editExamData.notOrderBool = false;\n      this.editExamData.beginDate = null;\n      this.editExamData.dateRange = [];\n      this.editExamData.endDate = null;\n      this.editExamData.type = 3;\n      this.editExamData.notOrder = 0;\n    },\n    // 提交搜索\n    searchExam: function searchExam(title) {\n      this.searchTitle.title = title;\n      this.getExam();\n    },\n    // 表格颜色控制\n    tableRowClassName: function tableRowClassName(_ref) {\n      var row = _ref.row,\n          rowIndex = _ref.rowIndex;\n\n      if (rowIndex % 4 === 1) {\n        return 'warning-row';\n      } else if (rowIndex % 4 === 3) {\n        return 'success-row';\n      }\n\n      return '';\n    },\n    // 当某行数据被点击\n    rowClick: function rowClick(row, column) {\n      if (column.label === '操作' || column.label === '打乱题序') return; // 打开考试信息统计页-展示考试完成情况和数据统计\n\n      this.$router.push({\n        name: 'ExamInfoView',\n        params: {\n          examId: row.examId\n        }\n      });\n    },\n    // 是否为教师发布\n    isMyCreate: function isMyCreate(id) {\n      if (this.user.userId === id) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // 更新考试状态\n    updateExamState: function updateExamState(exam) {\n      var _this4 = this;\n\n      exam.notOrder = exam.notOrderBool ? 1 : 0;\n      var newExam = {\n        examId: exam.examId,\n        notOrder: exam.notOrder\n      };\n      this.$axios.post(\"/Exam/updateInfo\", newExam).then(function (res) {\n        if (res.data.flag) {\n          // 修改成功\n          _this4.$message.success(res.data.msg);\n        } else {\n          // 服务故障\n          _this4.$message.error(res.data.msg);\n        }\n      });\n    },\n    // 编辑考试信息\n    editExam: function editExam(row) {\n      var _this5 = this;\n\n      // 检查考试是否开启\n      var currentDate = new Date();\n\n      if (currentDate > Date.parse(row.beginDate)) {\n        // 弹框确认\n        this.$confirm('该考试已经开启, 继续编辑可能造成数据错误，是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(function () {\n          _this5.initEditExam(row);\n        }).catch(function () {\n          // 取消删除\n          _this5.$message.info('取消编辑');\n        });\n      } else {\n        this.initEditExam(row);\n      }\n    },\n    // 初始化编辑信息\n    initEditExam: function initEditExam(row) {\n      // 初始化数据\n      this.editExamData.examId = row.examId;\n      this.editExamData.title = row.title;\n      this.editExamData.detail = row.detail;\n      this.editExamData.notOrderBool = row.notOrderBool;\n      this.editExamData.dateRange = [row.beginDate, row.endDate];\n      this.editExamData.beginDate = row.beginDate;\n      this.editExamData.endDate = row.endDate;\n      this.editExamData.type = 3;\n      this.editExamData.notOrder = row.notOrder; // 启动编辑表单\n\n      this.showEditExam = true; // 启动编辑状态\n\n      this.isEditStatue = true;\n    },\n    // 考试出题\n    editPaper: function editPaper(row) {\n      // 打开考试信息统计页-展示考试完成情况和数据统计\n      this.$router.push({\n        name: 'ExamPaperManage',\n        params: {\n          examId: row.examId\n        }\n      });\n    },\n    // 删除考试\n    deleteExam: function deleteExam(row) {\n      var _this6 = this;\n\n      // 弹框确认\n      this.$confirm('此操作将删除该考试及相关数据, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        var exam = {\n          examId: row.examId\n        }; // 执行删除\n\n        _this6.$axios.post(\"/Exam/deleteExamById\", exam).then(function (resp) {\n          if (resp.data.flag) {\n            // 删除成功，刷新数据\n            _this6.getExam();\n\n            _this6.$message.success('删除成功！');\n          } else {\n            _this6.$message.error('删除失败！');\n          }\n        });\n      }).catch(function () {\n        // 取消删除\n        _this6.$message.info('取消删除');\n      });\n    },\n    // 分页大小变化\n    handleSizeChange: function handleSizeChange(val) {\n      this.pageSize = val; // 查询所有考试\n\n      this.getExam();\n    },\n    // 当前页变化\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.currentPage = val; // 查询所有考试\n\n      this.getExam();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["name","components","SearchBox","Ckeditor4","data","user","currentPage","pageSize","totalCount","searchTitle","title","editExamData","examId","type","detail","notOrderBool","notOrder","beginDate","endDate","dateRange","rules","required","message","trigger","examData","showEditExam","isEditStatue","created","methods","getUser","getExam","createExam","submitExam","exam","resetFormData","searchExam","tableRowClassName","rowClick","row","column","params","isMyCreate","id","updateExamState","editExam","confirmButtonText","cancelButtonText","then","catch","initEditExam","editPaper","deleteExam","handleSizeChange","val","handleCurrentChange"],"sourceRoot":"src/pages/user/teacherComponents","sources":["ExamTab.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 功能菜单 -->\r\n        <el-row style=\"position: relative; height: 90px\">\r\n            <!--按钮-->\r\n            <el-col :span=\"6\" id=\"functionMenu\">\r\n                <el-button type=\"primary\" plain @click=\"createExam\">发布考试</el-button>\r\n            </el-col>\r\n            <!--搜索表单-->\r\n            <el-col :span=\"8\">\r\n                <search-box id=\"SearchBox\" @onSubmit=\"searchExam\"></search-box>\r\n            </el-col>\r\n        </el-row>\r\n\r\n        <!-- 创建考试表单 -->\r\n        <el-dialog title=\"编辑考试\"\r\n                   v-if=\"showEditExam\"\r\n                   :visible.sync=\"showEditExam\"\r\n                   width=\"50%\">\r\n            <!-- 表单 -->\r\n            <el-form :model=\"editExamData\"\r\n                     ref=\"createExamForm\"\r\n                     :rules=\"rules\"\r\n                     style=\"margin-right: 2em\"\r\n                     label-width=\"6em\">\r\n                <el-form-item label=\"名称\" prop=\"title\">\r\n                    <el-input v-model=\"editExamData.title\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"详情\">\r\n                    <ckeditor4 v-model=\"editExamData.detail\"></ckeditor4>\r\n                </el-form-item>\r\n                <el-form-item label=\"打乱题序\">\r\n                    <el-switch v-model=\"editExamData.notOrderBool\"></el-switch>\r\n                </el-form-item>\r\n                <el-form-item label=\"开始时间\">\r\n                    <el-date-picker\r\n                            v-model=\"editExamData.dateRange\"\r\n                            type=\"datetimerange\"\r\n                            range-separator=\"至\"\r\n                            start-placeholder=\"开始日期\"\r\n                            end-placeholder=\"结束日期\">\r\n                    </el-date-picker>\r\n                </el-form-item>\r\n                <el-form-item>\r\n                    <el-button type=\"primary\" @click=\"submitExam(editExamData)\">提交</el-button>\r\n                    <el-button type=\"info\" @click=\"showEditExam = false\">取消</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </el-dialog>\r\n\r\n        <!--　考试信息　-->\r\n        <div>\r\n            <template>\r\n                <el-table\r\n                        :data=\"examData\"\r\n                        style=\"width: 100%;\"\r\n                        @row-click=\"rowClick\"\r\n                        :row-class-name=\"tableRowClassName\">\r\n                    <el-table-column\r\n                            label=\"序号\"\r\n                            type=\"index\"\r\n                            width=\"100\"\r\n                            align=\"center\">\r\n                    </el-table-column>\r\n\r\n                    <el-table-column\r\n                            prop=\"title\"\r\n                            label=\"名称\"\r\n                            align=\"center\">\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            label=\"发布者\"\r\n                            align=\"center\">\r\n                        <template slot-scope=\"scope\">\r\n                            <el-tag v-if=\"!isMyCreate(scope.row.authorId)\" type=\"success\">管理员</el-tag>\r\n                            <el-tag v-else type=\"success\">本人</el-tag>\r\n                        </template>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            label=\"打乱题序\"\r\n                            align=\"center\"\r\n                            style=\"position: relative\">\r\n                        <template slot-scope=\"scope\">\r\n                            <el-switch class=\"tableSwitch\" v-model=\"scope.row.notOrderBool\" @change=\"updateExamState(scope.row)\"></el-switch>\r\n                        </template>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"formatBeginDate\"\r\n                            label=\"开始日期\"\r\n                            align=\"center\"\r\n                            sortable>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"formatEndDate\"\r\n                            label=\"截止日期\"\r\n                            align=\"center\"\r\n                            sortable>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"formatCreateDate\"\r\n                            label=\"创建日期\"\r\n                            align=\"center\"\r\n                            sortable>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            align=\"center\"\r\n                            label=\"操作\">\r\n                        <template slot-scope=\"scope\">\r\n                            <el-button type=\"text\" style=\"font-size: 16px\" @click=\"editExam(scope.row)\">\r\n                                <i style=\"margin:0 0.2em\" class=\"el-icon-edit\"></i>编辑</el-button>\r\n                            <el-button type=\"text\" style=\"font-size: 16px\" @click=\"editPaper(scope.row)\">\r\n                                <i style=\"margin:0 0.2em\" class=\"el-icon-bank-card\"></i>出题</el-button>\r\n                            <el-button type=\"text\" style=\"color: #afafaf;font-size: 16px\" @click=\"deleteExam(scope.row)\">\r\n                                <i style=\"margin:0 0.2em\" class=\"el-icon-delete\"></i>删除</el-button>\r\n                        </template>\r\n                    </el-table-column>\r\n                </el-table>\r\n            </template>\r\n        </div>\r\n\r\n        <!-- 分页工具条 数据小于10条不展示 -->\r\n        <el-pagination\r\n                id=\"pageBar\"\r\n                v-show=\"totalCount >= 10\"\r\n                @size-change=\"handleSizeChange\"\r\n                @current-change=\"handleCurrentChange\"\r\n                :current-page=\"currentPage\"\r\n                :page-sizes=\"[5, 10, 15, 20]\"\r\n                :page-size=\"pageSize\"\r\n                layout=\"total, sizes, prev, pager, next, jumper\"\r\n                :total=\"totalCount\">\r\n        </el-pagination>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import SearchBox from \"@/components/SearchBox\";\r\n    import Ckeditor4 from \"@/components/Ckeditor4\";\r\n    export default {\r\n        name: \"ExamTab\",\r\n        components:{\r\n            SearchBox,\r\n            Ckeditor4\r\n        },\r\n        data(){\r\n            return{\r\n                user:'',\r\n                // 当前页码\r\n                currentPage: 1,\r\n                // 分页大小\r\n                pageSize: 10,\r\n                // 总页码数\r\n                totalCount: 1,\r\n                // 内置查询模型\r\n                searchTitle:{\r\n                    title:'',\r\n                },\r\n                // 创建考试数据模型\r\n                editExamData:{\r\n                    examId:undefined,\r\n                    type:3,\r\n                    title:'',\r\n                    detail:'',\r\n                    notOrderBool:false,\r\n                    notOrder:0,\r\n                    beginDate:null,\r\n                    endDate:null,\r\n                    dateRange:[],\r\n                },\r\n                // 表单校验规则\r\n                rules: {\r\n                    title: [\r\n                        { required: true, message: '请输入考试名称', trigger: 'blur' }\r\n                    ],\r\n                },\r\n                // 考试数据\r\n                examData:[],\r\n                // 考试创建区展示\r\n                showEditExam:false,\r\n                // 考试编辑状态\r\n                isEditStatue:false,\r\n            }\r\n        },\r\n        created() {\r\n            this.getUser();\r\n            this.getExam();\r\n        },\r\n        methods:{\r\n            // 获取用户数据\r\n            getUser(){\r\n                this.$axios.get(\"/Users/isUserLogin\").then((res)=>{\r\n                    if(res.data.flag){\r\n                        // 保存用户数据\r\n                        this.user = res.data.data;\r\n                    }else{\r\n                        // 服务故障-跳转登陆界面\r\n                        this.$router.push({name:'Login'});\r\n                    }\r\n                });\r\n            },\r\n            // 查询考试数据\r\n            getExam(){\r\n                this.searchTitle[\"pageSize\"]=this.pageSize;\r\n                this.searchTitle[\"currentPage\"]=this.currentPage;\r\n                this.$axios.post(\"/Exam/getExam\",this.searchTitle).then((res)=>{\r\n                    if(res.data.flag){\r\n                        /* 保存公告数据 */\r\n                        this.examData = res.data.data.records;\r\n                        /* 保存分页数据 */\r\n                        this.totalCount = res.data.data.total;\r\n                        this.currentPage = res.data.data.current;\r\n                        this.pageSize = res.data.data.size;\r\n                    }else{\r\n                        // 服务故障\r\n                        this.$message.error(\"信息获取失败！\");\r\n                    }\r\n                });\r\n            },\r\n            // 创建考试\r\n            createExam(){\r\n                // 数据清理\r\n                if(this.isEditStatue){\r\n                    // 残存的编辑状态\r\n                    // 在用户未提交编辑内容时，会停留在编辑状态，故要状态重置\r\n                    this.resetFormData();\r\n                    this.isEditStatue = false;\r\n                }\r\n                this.showEditExam = true;\r\n            },\r\n            // 发布考试\r\n            submitExam(exam){\r\n                // 规则校验\r\n                this.$refs['createExamForm'].validate((valid) => {\r\n                    if (valid && this.editExamData.dateRange !== null) {\r\n                        if(exam.dateRange.length === 0){\r\n                            this.$message.error(\"必须指定起止日期\");\r\n                            return;\r\n                        }\r\n                        // 校验完成 - 组织数据\r\n                        exam.notOrder= exam.notOrderBool ? 1:0;\r\n                        exam.type = 3;  // 考试类型\r\n                        // 时间分配\r\n                        exam.beginDate = exam.dateRange[0];\r\n                        exam.endDate = exam.dateRange[1];\r\n                        if(this.isEditStatue){\r\n                            // 编辑表单状态，通过examId更新数据\r\n                            this.$axios.post(\"/Exam/updateExam\",exam).then((res)=>{\r\n                                if(res.data.flag){\r\n                                    this.$message.success(res.data.msg);\r\n                                    // 关闭窗口\r\n                                    this.showEditExam = false;\r\n                                    // 关闭编辑状态\r\n                                    this.isEditStatue = false;\r\n                                    // 重置表单\r\n                                    this.resetFormData();\r\n                                    // 刷新数据\r\n                                    this.getExam();\r\n                                }else{\r\n                                    this.$message.error(res.data.msg);\r\n                                }\r\n                            })\r\n                        }else{\r\n                            // 清空无用的id\r\n                            exam.examId = undefined;\r\n                            // 创建表单状态，创建一条新数据\r\n                            this.$axios.post(\"/Exam/createExam\",exam).then((res)=>{\r\n                                if(res.data.flag){\r\n                                    this.$message.success(res.data.msg);\r\n                                    // 关闭窗口\r\n                                    this.showEditExam = false;\r\n                                    // 重置表单\r\n                                    this.resetFormData();\r\n                                    // 刷新数据\r\n                                    this.getExam();\r\n                                }else{\r\n                                    this.$message.error(res.data.msg);\r\n                                }\r\n                            })\r\n                        }\r\n                    }else{\r\n                        // 校验失败\r\n                        this.$message.warning(\"请将考试名称填写完整\");\r\n                    }\r\n                });\r\n            },\r\n            // 重置表单\r\n            resetFormData(){\r\n                this.editExamData.examId = undefined;\r\n                this.editExamData.title = '';\r\n                this.editExamData.detail = '';\r\n                this.editExamData.notOrderBool = false\r\n                this.editExamData.beginDate = null;\r\n                this.editExamData.dateRange = [];\r\n                this.editExamData.endDate = null;\r\n                this.editExamData.type = 3;\r\n                this.editExamData.notOrder = 0;\r\n            },\r\n            // 提交搜索\r\n            searchExam(title){\r\n                this.searchTitle.title = title;\r\n                this.getExam();\r\n            },\r\n            // 表格颜色控制\r\n            tableRowClassName({row, rowIndex}) {\r\n                if (rowIndex%4 === 1) {\r\n                    return 'warning-row';\r\n                } else if (rowIndex%4 === 3) {\r\n                    return 'success-row';\r\n                }\r\n                return '';\r\n            },\r\n            // 当某行数据被点击\r\n            rowClick(row,column){\r\n                if(column.label === '操作' || column.label === '打乱题序')return;\r\n                // 打开考试信息统计页-展示考试完成情况和数据统计\r\n                this.$router.push({\r\n                    name:'ExamInfoView',\r\n                    params:{\r\n                        examId:row.examId,\r\n                    }\r\n                })\r\n            },\r\n            // 是否为教师发布\r\n            isMyCreate(id){\r\n                if(this.user.userId === id){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            },\r\n            // 更新考试状态\r\n            updateExamState(exam){\r\n                exam.notOrder = exam.notOrderBool ? 1:0;\r\n                let newExam = {\r\n                    examId:exam.examId,\r\n                    notOrder:exam.notOrder,\r\n                }\r\n                this.$axios.post(\"/Exam/updateInfo\",newExam).then((res)=>{\r\n                    if(res.data.flag){\r\n                        // 修改成功\r\n                        this.$message.success(res.data.msg);\r\n                    }else{\r\n                        // 服务故障\r\n                        this.$message.error(res.data.msg);\r\n                    }\r\n                });\r\n            },\r\n            // 编辑考试信息\r\n            editExam(row){\r\n                // 检查考试是否开启\r\n                let currentDate = new Date();\r\n                if(currentDate > Date.parse(row.beginDate)){\r\n                    // 弹框确认\r\n                    this.$confirm('该考试已经开启, 继续编辑可能造成数据错误，是否继续?', '提示', {\r\n                        confirmButtonText: '确定',\r\n                        cancelButtonText: '取消',\r\n                        type: 'warning'\r\n                    }).then(() => {\r\n                       this.initEditExam(row);\r\n                    }).catch(() => {\r\n                        // 取消删除\r\n                        this.$message.info('取消编辑');\r\n                    });\r\n                }else{\r\n                   this.initEditExam(row);\r\n                }\r\n            },\r\n            // 初始化编辑信息\r\n            initEditExam(row){\r\n                // 初始化数据\r\n                this.editExamData.examId = row.examId;\r\n                this.editExamData.title = row.title;\r\n                this.editExamData.detail = row.detail;\r\n                this.editExamData.notOrderBool = row.notOrderBool;\r\n                this.editExamData.dateRange = [row.beginDate,row.endDate];\r\n                this.editExamData.beginDate = row.beginDate;\r\n                this.editExamData.endDate = row.endDate;\r\n                this.editExamData.type = 3;\r\n                this.editExamData.notOrder = row.notOrder;\r\n                // 启动编辑表单\r\n                this.showEditExam = true;\r\n                // 启动编辑状态\r\n                this.isEditStatue = true;\r\n            },\r\n            // 考试出题\r\n            editPaper(row){\r\n                // 打开考试信息统计页-展示考试完成情况和数据统计\r\n                this.$router.push({\r\n                    name:'ExamPaperManage',\r\n                    params:{\r\n                        examId:row.examId,\r\n                    }\r\n                })\r\n            },\r\n            // 删除考试\r\n            deleteExam(row){\r\n                // 弹框确认\r\n                this.$confirm('此操作将删除该考试及相关数据, 是否继续?', '提示', {\r\n                    confirmButtonText: '确定',\r\n                    cancelButtonText: '取消',\r\n                    type: 'warning'\r\n                }).then(() => {\r\n                    let exam = {examId:row.examId};\r\n                    // 执行删除\r\n                    this.$axios.post(\"/Exam/deleteExamById\",exam).then(resp=>{\r\n                        if(resp.data.flag){\r\n                            // 删除成功，刷新数据\r\n                            this.getExam();\r\n                            this.$message.success('删除成功！');\r\n                        }else{\r\n                            this.$message.error('删除失败！');\r\n                        }\r\n                    })\r\n                }).catch(() => {\r\n                    // 取消删除\r\n                    this.$message.info('取消删除');\r\n                });\r\n            },\r\n            // 分页大小变化\r\n            handleSizeChange(val) {\r\n                this.pageSize = val;\r\n                // 查询所有考试\r\n                this.getExam();\r\n            },\r\n            // 当前页变化\r\n            handleCurrentChange(val) {\r\n                this.currentPage = val;\r\n                // 查询所有考试\r\n                this.getExam();\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    /* 功能栏 */\r\n    #functionMenu{\r\n        display: block;\r\n        margin-top: 1.25em;\r\n        margin-left: 1.25em;\r\n    }\r\n    /* 搜索栏 */\r\n    #SearchBox{\r\n        left: 120%;\r\n        position: relative;\r\n        margin-top: 1.25em;\r\n    }\r\n    /* 表格字体 */\r\n    .el-table{\r\n        font-size: 17px;\r\n    }\r\n    /* 选择开关 */\r\n    .tableSwitch{\r\n        position: relative;\r\n        bottom: 0.1em;\r\n    }\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}