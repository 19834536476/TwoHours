{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"SHAEncrypt\",\n  data: function data() {\n    return {\n      psw: ''\n    };\n  },\n  methods: {\n    encodeUTF8: function encodeUTF8(s) {\n      var i,\n          r = [],\n          c,\n          x;\n\n      for (i = 0; i < s.length; i++) {\n        if ((c = s.charCodeAt(i)) < 0x80) r.push(c);else if (c < 0x800) r.push(0xC0 + (c >> 6 & 0x1F), 0x80 + (c & 0x3F));else {\n          if ((x = c ^ 0xD800) >> 10 === 0) //对四字节UTF-16转换为Unicode\n            c = (x << 10) + (s.charCodeAt(++i) ^ 0xDC00) + 0x10000, r.push(0xF0 + (c >> 18 & 0x7), 0x80 + (c >> 12 & 0x3F));else r.push(0xE0 + (c >> 12 & 0xF));\n          r.push(0x80 + (c >> 6 & 0x3F), 0x80 + (c & 0x3F));\n        }\n      }\n\n      ;\n      return r;\n    },\n    // 字符串加密成 hex 字符串\n    sha1: function sha1(s) {\n      var data = new Uint8Array(this.encodeUTF8(s));\n      var i, j, t;\n      var l = (data.length + 8 >>> 6 << 4) + 16;\n      s = new Uint8Array(l << 2);\n      s.set(new Uint8Array(data.buffer)), s = new Uint32Array(s.buffer);\n\n      for (t = new DataView(s.buffer), i = 0; i < l; i++) {\n        s[i] = t.getUint32(i << 2);\n      }\n\n      s[data.length >> 2] |= 0x80 << 24 - (data.length & 3) * 8;\n      s[l - 1] = data.length << 3;\n\n      var w = [],\n          f = [function () {\n        return m[1] & m[2] | ~m[1] & m[3];\n      }, function () {\n        return m[1] ^ m[2] ^ m[3];\n      }, function () {\n        return m[1] & m[2] | m[1] & m[3] | m[2] & m[3];\n      }, function () {\n        return m[1] ^ m[2] ^ m[3];\n      }],\n          rol = function rol(n, c) {\n        return n << c | n >>> 32 - c;\n      },\n          k = [1518500249, 1859775393, -1894007588, -899497514],\n          m = [1732584193, -271733879, null, null, -1009589776];\n\n      m[2] = ~m[0];\n      m[3] = ~m[1];\n\n      for (i = 0; i < s.length; i += 16) {\n        var o = m.slice(0);\n\n        for (j = 0; j < 80; j++) {\n          w[j] = j < 16 ? s[i + j] : rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1), t = rol(m[0], 5) + f[j / 20 | 0]() + m[4] + w[j] + k[j / 20 | 0] | 0, m[1] = rol(m[1], 30), m.pop(), m.unshift(t);\n        }\n\n        for (j = 0; j < 5; j++) {\n          m[j] = m[j] + o[j] | 0;\n        }\n      }\n\n      ;\n      t = new DataView(new Uint32Array(m).buffer);\n\n      for (var _i = 0; _i < 5; _i++) {\n        m[_i] = t.getUint32(_i << 2);\n      }\n\n      var hex = Array.prototype.map.call(new Uint8Array(new Uint32Array(m).buffer), function (e) {\n        return (e < 16 ? \"0\" : \"\") + e.toString(16);\n      }).join(\"\");\n      return hex;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AACAA,oBADA;AAEAC,MAFA,kBAEA;AACA;AACAC;AADA;AAGA,GANA;AAOAC;AACAC,cADA,sBACAC,CADA,EACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA,yDACA,sEACA;AACA;AACAC,oEACAC,uDADA,CADA,KAGAA;AACAA;AACA;AATA;;AASA;AACA;AACA,KAdA;AAeA;AACAC,QAhBA,gBAgBAH,CAhBA,EAgBA;AACA;AACA;AACA;AACAA;AACAA;;AACA;AAAAA;AAAA;;AACAA;AACAA;;AACA;AAAA,eACA;AAAA;AAAA,OADA,EAEA;AAAA;AAAA,OAFA,EAGA;AAAA;AAAA,OAHA,EAIA;AAAA;AAAA,OAJA;AAAA,UAKAI;AAAA;AAAA,OALA;AAAA,UAMAC,qDANA;AAAA,UAOAC,qDAPA;;AAQAA;AACAA;;AACA;AACA;;AACA;AACAC,0FACAC,oEADA,EAEAF,oBAFA,EAEAA,OAFA,EAEAA,YAFA;AADA;;AAIA;AAAAA;AAAA;AACA;;AAAA;AACAE;;AACA;AAAAF;AAAA;;AAEA;AACA;AACA,OAFA,EAEAG,IAFA,CAEA,EAFA;AAGA;AACA;AAlDA;AAPA","names":["name","data","psw","methods","encodeUTF8","s","c","r","sha1","rol","k","m","w","t","join"],"sourceRoot":"src/components","sources":["SHAEncrypt.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-input v-model=\"psw\" placeholder=\"标题\"></el-input>\r\n        <el-button type=\"primary\" plain @click=\"sha1(psw)\">加密</el-button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"SHAEncrypt\",\r\n        data(){\r\n            return{\r\n                psw:'',\r\n            }\r\n        },\r\n        methods:{\r\n            encodeUTF8(s) {\r\n                let i, r = [], c, x;\r\n                for (i = 0; i < s.length; i++)\r\n                    if ((c = s.charCodeAt(i)) < 0x80) r.push(c);\r\n                    else if (c < 0x800) r.push(0xC0 + (c >> 6 & 0x1F), 0x80 + (c & 0x3F));\r\n                    else {\r\n                        if ((x = c ^ 0xD800) >> 10 === 0) //对四字节UTF-16转换为Unicode\r\n                            c = (x << 10) + (s.charCodeAt(++i) ^ 0xDC00) + 0x10000,\r\n                                r.push(0xF0 + (c >> 18 & 0x7), 0x80 + (c >> 12 & 0x3F));\r\n                        else r.push(0xE0 + (c >> 12 & 0xF));\r\n                        r.push(0x80 + (c >> 6 & 0x3F), 0x80 + (c & 0x3F));\r\n                    };\r\n                return r;\r\n            },\r\n            // 字符串加密成 hex 字符串\r\n            sha1(s) {\r\n                let data = new Uint8Array(this.encodeUTF8(s))\r\n                let i, j, t;\r\n                let l = ((data.length + 8) >>> 6 << 4) + 16;\r\n                s = new Uint8Array(l << 2);\r\n                s.set(new Uint8Array(data.buffer)), s = new Uint32Array(s.buffer);\r\n                for (t = new DataView(s.buffer), i = 0; i < l; i++)s[i] = t.getUint32(i << 2);\r\n                s[data.length >> 2] |= 0x80 << (24 - (data.length & 3) * 8);\r\n                s[l - 1] = data.length << 3;\r\n                var w = [], f = [\r\n                        function () { return m[1] & m[2] | ~m[1] & m[3]; },\r\n                        function () { return m[1] ^ m[2] ^ m[3]; },\r\n                        function () { return m[1] & m[2] | m[1] & m[3] | m[2] & m[3]; },\r\n                        function () { return m[1] ^ m[2] ^ m[3]; }\r\n                    ], rol = function (n, c) { return n << c | n >>> (32 - c); },\r\n                    k = [1518500249, 1859775393, -1894007588, -899497514],\r\n                    m = [1732584193, -271733879, null, null, -1009589776];\r\n                m[2] = ~m[0];\r\n                m[3] = ~m[1];\r\n                for (i = 0; i < s.length; i += 16) {\r\n                    let o = m.slice(0);\r\n                    for (j = 0; j < 80; j++)\r\n                        w[j] = j < 16 ? s[i + j] : rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1),\r\n                            t = rol(m[0], 5) + f[j / 20 | 0]() + m[4] + w[j] + k[j / 20 | 0] | 0,\r\n                            m[1] = rol(m[1], 30), m.pop(), m.unshift(t);\r\n                    for (j = 0; j < 5; j++)m[j] = m[j] + o[j] | 0;\r\n                };\r\n                t = new DataView(new Uint32Array(m).buffer);\r\n                for (let i = 0; i < 5; i++)m[i] = t.getUint32(i << 2);\r\n\r\n                let hex = Array.prototype.map.call(new Uint8Array(new Uint32Array(m).buffer), function (e) {\r\n                    return (e < 16 ? \"0\" : \"\") + e.toString(16);\r\n                }).join(\"\");\r\n                return hex;\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}